<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="js-theme-default is-logged-out js-astro better-docs better-docs-wide better-docs-wide-bg complete"><head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8">
        <link rel="P3Pv1" href="/w3c/p3p.xml">
        <style id="placeholder-styles">@-webkit-keyframes a{0%{background-color:#d3d3d3}50%{background-color:#e5e5e5}to{background-color:#d3d3d3}}@keyframes a{0%{background-color:#d3d3d3}50%{background-color:#e5e5e5}to{background-color:#d3d3d3}}.placeholder{-webkit-animation:a 1.5s ease-in infinite;animation:a 1.5s ease-in infinite;background-color:#e5e5e5}.placeholder-hero{height:20em}.placeholder-heading{height:3em;width:55%}.placeholder-sentence{height:1.5em;margin-bottom:.5em}.placeholder-sentence-last{width:85%}.placeholder-paragraph{height:8em;margin-top:1.5625em}.placeholder-btn{height:3em;width:8em}.placeholder-btn,.placeholder-heading,.placeholder-hero,.placeholder-paragraph{margin-bottom:1.5625em}</style><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="shortcut icon" href="/files/favicon.ico"><link rel="icon" sizes="16x16 24x24 32x32 64x64" href="/files/favicon.ico"><style id="better-docs-lang-styles">pre.lang-bash,pre.language-bash,pre.lang-ruby,pre.language-ruby,pre.lang-python,pre.language-python{display:none;visibility:hidden;}pre.lang-bash.active,pre.language-bash.active,pre.lang-ruby.active,pre.language-ruby.active,pre.lang-python.active,pre.language-python.active{display:block;visibility:visible;}</style><script src="https://cdn.jsdelivr.net/gh/bramstein/fontfaceobserver@2.0.13/fontfaceobserver.standalone.js"></script><script src="/public/Mashery/scripts/themes/blackbeard/prism.js"></script><script async="" src="https://www.googletagmanager.com/gtm.js?id=GTM-PV9XWHD"></script><script type="text/javascript">
            //<![CDATA[
            var mashery_info = {
                        };

            // iframe'd detection, to pop out if in an iframe
            if (window.location !== parent.window.location && !(/(page|docs|blog)\/preview/.test(window.location.pathname))) {
                parent.window.location = window.location;
            }
            //]]>
        </script>
            <title>NFL v7 | Sportradar US API Portal</title>
    <link rel="alternate" type="application/rss+xml" href="https://developer.sportradar.com/docs/feed-comments/american_football/NFL_v7">
    <link rel="stylesheet" type="text/css" media="screen" href="https://developer.sportradar.com/files/default.min.css">
    <script src="/public/Mashery/scripts/themes/blackbeard/placeholders.js" type="text/javascript"></script>
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js" type="text/javascript"></script>
    <script src="/public/Mashery/scripts/Mashery/source/ForumPreview.js" type="text/javascript"></script>
<script type="text/javascript">
//<![CDATA[
// @temp
// Coming to core
portalOptions.ajaxIgnore = '.js-ajax-ignore';

var redirectMap = [
	{
		original: '/files/index.html',
		redirect: '/docs/read/Home'
	},
	{
		original: '/files/indexSoccer.html#soccer-extended-api-v3',
		redirect: '/docs/read/football_soccer/Soccer_Extended_v3'
	},
	{
		original: '/files/indexSoccer.html#soccer-api-v3',
		redirect: '/docs/read/football_soccer/Soccer_v3'
	},
	{
		original: '/files/indexSoccer.html#soccer-api-v2-1',
		redirect: '/docs/read/football_soccer/Soccer_v21'
	},
	{
		original: '/files/indexSoccer.html#soccer-api-v2',
		redirect: '/docs/read/football_soccer/Soccer_v2'
	},
	{
		original: '/files/indexSoccer.html#beach-soccer-api',
		redirect: '/docs/read/football_soccer/Beach_Soccer_v1'
	},
	{
		original: '/files/indexSoccer.html',
		redirect: '/docs/read/football_soccer/Soccer_Extended_v3'
	},
	{
		original: '/files/indexFootball.html#nfl-official-api-v5',
		redirect: '/docs/read/american_football/NFL_v5'
	},
	{
		original: '/files/indexFootball.html#nfl-official-api-v2',
		redirect: '/docs/read/american_football/NFL_v2'
	},
	{
		original: '/files/indexFootball.html#nfl-official-api-v1',
		redirect: '/docs/read/american_football/NFL_v1'
	},
	{
		original: '/files/indexFootball.html#nfl-next-generation-stats-api',
		redirect: '/docs/read/american_football/NFL_Next_Generation_Stats_v1'
	},
	{
		original: '/files/indexFootball.html#classic-nfl-api',
		redirect: '/docs/read/american_football/Classic_NFL_v1'
	},
	{
		original: '/files/indexFootball.html#ncaa-football-api',
		redirect: '/docs/read/american_football/NCAA_Mens_Football_v1'
	},
	{
		original: '/files/indexFootball.html#arena-football-league',
		redirect: '/docs/read/american_football/Arena_Football_v1'
	},
	{
		original: '/files/indexFootball.html#global-american-football-api',
		redirect: '/docs/read/american_football/Global_American_Football_v1'
	},
	{
		original: '/files/indexFootball.html',
		redirect: '/docs/read/american_football/NFL_v5'
	},
	{
		original: '/files/indexFootball.html#aussie-rules-football-v2',
		redirect: '/docs/read/australian_rules_football/Australian_Rules_Football_v2'
	},
	{
		original: '/files/indexFootball.html#aussie-rules-football-v1',
		redirect: '/docs/read/australian_rules_football/Australian_Rules_Football_v1'
	},
	{
		original: '/files/indexBaseball.html#major-league-baseball-api-v6-5',
		redirect: '/docs/read/baseball/MLB_v65'
	},
	{
		original: '/files/indexBaseball.html#major-league-baseball-api-v6',
		redirect: '/docs/read/baseball/MLB_v6'
	},
	{
		original: '/files/indexBaseball.html#major-league-baseball-api-v5',
		redirect: '/docs/read/baseball/MLB_v5'
	},
	{
		original: '/files/indexBaseball.html#global-baseball-api',
		redirect: '/docs/read/baseball/Global_Baseball_v1'
	},
	{
		original: '/files/indexBaseball.html',
		redirect: '/docs/read/baseball/MLB_v65'
	},
	{
		original: '/files/indexBasketball.html#nba-api-v5',
		redirect: '/docs/read/basketball/NBA_v5'
	},
	{
		original: '/files/indexBasketball.html#nba-api-v4',
		redirect: '/docs/read/basketball/NBA_v4'
	},
	{
		original: '/files/indexBasketball.html#nba-api-v3',
		redirect: '/docs/read/basketball/NBA_v3'
	},
	{
		original: '/files/indexBasketball.html#wnba-api-v4',
		redirect: '/docs/read/basketball/WNBA_v4'
	},
	{
		original: '/files/indexBasketball.html#wnba-api-v3',
		redirect: '/docs/read/basketball/WNBA_v3'
	},
	{
		original: '/files/indexBasketball.html#ncaa-mens-basketball-api-v4',
		redirect: '/docs/read/basketball/NCAA_Mens_Basketball_v4'
	},
	{
		original: '/files/indexBasketball.html#ncaa-mens-basketball-api-v3',
		redirect: '/docs/read/basketball/NCAA_Mens_Basketball_v3'
	},
	{
		original: '/files/indexBasketball.html#ncaa-womens-basketball-api',
		redirect: '/docs/read/basketball/NCAA_Womens_Basketball_v3'
	},
	{
		original: '/files/indexBasketball.html#global-basketball-api',
		redirect: '/docs/read/basketball/Global_Basketball_v1'
	},
	{
		original: '/files/indexBasketball.html',
		redirect: '/docs/read/basketball/NBA_v5'
	},
	{
		original: '/files/indexCricket.html#cricket-v2',
		redirect: '/docs/read/cricket/Cricket_v2'
	},
	{
		original: '/files/indexCricket.html#cricket-v1',
		redirect: '/docs/read/cricket/Cricket_v1'
	},
	{
		original: '/files/indexCricket.html',
		redirect: '/docs/read/cricket/Cricket_v2'
	},
	{
		original: '/files/indexEditorial.html#editorial-content-api',
		redirect: '/docs/read/editorial_content/Editorial_Content_v3'
	},
	{
		original: '/files/indexEditorial.html',
		redirect: '/docs/read/editorial_content/Editorial_Content_v3'
	},
	{
		original: '/files/indexeSports.html',
		redirect: '/docs/read/esports/CounterStrike_Global_Offensive_v1'
	},
	{
		original: '/files/indexGolf.html#golf-api',
		redirect: '/docs/read/golf/Golf_v2'
	},
	{
		original: '/files/indexGolf.html',
		redirect: '/docs/read/golf/Golf_v2'
	},
	{
		original: '/files/indexHandball.html#handball-api-v2',
		redirect: '/docs/read/handball/Handball_v2'
	},
	{
		original: '/files/indexHandball.html#handball-api-v1',
		redirect: '/docs/read/handball/Handball_v1'
	},
	{
		original: '/files/indexHandball.html',
		redirect: '/docs/read/handball/Handball_v2'
	},
	{
		original: '/files/indexHockey.html#nhl-api-v5',
		redirect: '/docs/read/hockey/NHL_v5'
	},
	{
		original: '/files/indexHockey.html#nhl-api-v4',
		redirect: '/docs/read/hockey/NHL_v4'
	},
	{
		original: '/files/indexHockey.html#ncaa-mens-hockey-api',
		redirect: '/docs/read/hockey/NCAA_Mens_Hockey_v1'
	},
	{
		original: '/files/indexHockey.html#global-ice-hockey-api',
		redirect: '/docs/read/hockey/Global_Ice_Hockey_v1'
	},
	{
		original: '/files/indexHockey.html#field-hockey-api',
		redirect: '/docs/read/hockey/Field_Hockey_v1'
	},
	{
		original: '/files/indexHockey.html',
		redirect: '/docs/read/hockey/NHL_v5'
	},
	{
		original: '/files/indexImages.html#images-api-v3',
		redirect: '/docs/read/images/Images_v3'
	},
	{
		original: '/files/indexImages.html',
		redirect: '/docs/read/images/Images_v3'
	},
	{
		original: '/files/indexOdds.html#odds-comparison-api',
		redirect: '/docs/read/odds/Odds_Comparison_v1'
	},
	{
		original: '/files/indexOdds.html',
		redirect: '/docs/read/odds/Odds_Comparison_v1'
	},
	{
		original: '/files/indexOlympics.html#winter-olympics-api',
		redirect: '/docs/read/olympics/Winter_Olympics_v3'
	},
	{
		original: '/files/indexOlympics.html',
		redirect: '/docs/read/olympics/Winter_Olympics_v3'
	},
	{
		original: '/files/indexRacing.html#official-nascar-api',
		redirect: '/docs/read/racing/NASCAR_v3'
	},
	{
		original: '/files/indexRacing.html#sr-nascar-api',
		redirect: '/docs/read/racing/Classic_NASCAR_v3'
	},
	{
		original: '/files/indexRacing.html#motorsport-api',
		redirect: '/docs/read/racing/Motorsport_v1'
	},
	{
		original: '/files/indexRacing.html#formula-1-api',
		redirect: '/docs/read/racing/Formula_1_v2'
	},
	{
		original: '/files/indexRacing.html#formula-e-api',
		redirect: '/docs/read/racing/Formula_E_v2'
	},
	{
		original: '/files/indexRacing.html#indycar-api',
		redirect: '/docs/read/racing/IndyCar_v2'
	},
	{
		original: '/files/indexRacing.html#motogp-api',
		redirect: '/docs/read/racing/MotoGP_v2'
	},
	{
		original: '/files/indexRacing.html',
		redirect: '/docs/read/racing/NASCAR_v3'
	},
	{
		original: '/files/indexRugby.html#rugby-api-v2',
		redirect: '/docs/read/rugby/Rugby_v2'
	},
	{
		original: '/files/indexRugby.html#rugby-api-v1',
		redirect: '/docs/read/rugby/Rugby_v1'
	},
	{
		original: '/files/indexRugby.html',
		redirect: '/docs/read/rugby/Rugby_v2'
	},
	{
		original: '/files/indexTennis.html#tennis-v2-api',
		redirect: '/docs/read/tennis/Tennis_v2'
	},
	{
		original: '/files/indexTennis.html',
		redirect: '/docs/read/tennis/Tennis_v2'
	},
	{
		original: '/files/indexBadminton.html',
		redirect: '/docs/read/baseline_sports_coverage/Badminton_v1'
	},
	{
		original: '/files/indexBandy.html',
		redirect: '/docs/read/baseline_sports_coverage/Bandy_v1'
	},
	{
		original: '/files/indexCurling.html',
		redirect: '/docs/read/baseline_sports_coverage/Curling_v1'
	},
	{
		original: '/files/indexCycling.html',
		redirect: '/docs/read/baseline_sports_coverage/Cycling_v1'
	},
	{
		original: '/files/indexDarts.html',
		redirect: '/docs/read/baseline_sports_coverage/Darts_v1'
	},
	{
		original: '/files/indexFloorball.html',
		redirect: '/docs/read/baseline_sports_coverage/Floorball_v1'
	},
	{
		original: '/files/indexFutsal.html',
		redirect: '/docs/read/baseline_sports_coverage/Futsal_v1'
	},
	{
		original: '/files/indexPesapallo.html',
		redirect: '/docs/read/baseline_sports_coverage/Pesapallo_v1'
	},
	{
		original: '/files/indexSnooker.html',
		redirect: '/docs/read/baseline_sports_coverage/Snooker_v1'
	},
	{
		original: '/files/indexSquash.html',
		redirect: '/docs/read/baseline_sports_coverage/Squash_v1'
	},
	{
		original: 'indexVolleyball.html#beach-volleyball-api',
		redirect: '/docs/read/baseline_sports_coverage/Volleyball_Beach'
	},
	{
		original: '/files/indexVolleyball.html#indoor-volleyball-api',
		redirect: '/docs/read/baseline_sports_coverage/Volleyball_Indoor'
	},
	{
		original: '/files/indexVolleyball.html',
		redirect: '/docs/read/baseline_sports_coverage/Volleyball_Beach'
	},
	{
		original: '/files/indexWaterpolo.html',
		redirect: '/docs/read/baseline_sports_coverage/Waterpolo_v1'
	}
];

window.addEventListener('portalBeforeRender', function () {
	if (mashery.contentType !== 'fourOhFour') return;
	var redirect = redirectMap.find(function (item) {
		return new RegExp(item.original).test(window.location.href);
	});
	if (!redirect) return;
	window.location.href = redirect.redirect;
}, false);

(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-PV9XWHD');

// Toggle IO-Docs
var toggleIODocs=function(){"use strict";var e,t=document.querySelector("#apiId");t&&function(e,t){if(e.api&&e.method){var o=document.querySelectorAll("#api"+t+" .methods .title .name");if(!(o.length<1)){var n=Array.from(o).filter(function(t){return t.textContent.trim()===decodeURIComponent(e.method)});if(!(n.length<1)){var r=n[0].closest(".method");if(r){ioDocs.hideAllMethods(),ioDocs.toggleMethod(r);var i=function(e){var t=0;if(e.offsetParent)do{t+=e.offsetTop,e=e.offsetParent}while(e);return t>=0?t:0}(r);window.scrollTo(0,i)}}}}}(e=function(e){var t={},o=document.createElement("a");o.href=e;for(var n=o.search.substring(1).split("&"),r=0;r<n.length;r++){var i=n[r].split("=");t[i[0]]=decodeURIComponent(i[1])}return t}(window.location.href),function(e){if(e.api){var o=Array.from(t.options).filter(function(t){return t.textContent.trim()===decodeURIComponent(e.api)});if(!(o.length<1))return t.value=o[0].value,ioDocs.selectAPI(o[0].value),o[0].value}}(e))};
//]]>
</script>
        <!-- add syntax highlighter -->
        <script type="text/javascript">
            if(window.SyntaxHighlighter != undefined) { // check for syntax highlighter load before using
                SyntaxHighlighter.all();
            }
        </script>
        <!-- end syntax highlighter -->
        <!--[if lt IE 7.]>
            <link href="/public/Mashery/styles/IE6.css" type="text/css" media="screen" rel="stylesheet" />
        <![endif]-->
        <!--[if IE 7]>
            <link href="/public/Mashery/styles/IE7.css" type="text/css" media="screen" rel="stylesheet" />
        <![endif]-->
        <!--[if gte IE 8]>
            <link href="/public/Mashery/styles/IE8.css" type="text/css" media="screen" rel="stylesheet" />
        <![endif]-->

    <style id="fluid-vids-styles">.fluidvids {width: 100%; max-width: 100%; position: relative;}.fluidvids-item {position: absolute; top: 0px; left: 0px; width: 100%; height: 100%;}</style></head>
    <body id="page-docs" class="page-docs read en_US offside-js--init">
        <!-- PAGE -->
        
        <!-- /page -->

        <!-- Start Branding script tag -->
        <script type="text/javascript">
            // get the branding logo to set the mouseover/out and onclick
            var brandingLogo = document.getElementById('branding-logo');
            if(brandingLogo != undefined) {
                brandingLogo['onclick'] = function() {
                    location.href = "http://www.sportradar.com/";
                };
                brandingLogo['onmouseover'] = function() {
                    this.style.cursor = 'pointer';
                };
                brandingLogo['onmouseout'] = function() {
                    this.style.cursor = 'auto';
                };
            }

            // get the mashery logo to set the mouseover/out and onclick
            var masheryLogo = document.getElementById('branding-mashery');
            if(masheryLogo != undefined) {
                masheryLogo['onclick'] = function() {
                    location.href = "http://www.mashery.com/";
                };
                masheryLogo['onmouseover'] = function() {
                    this.style.cursor = 'pointer';
                };
                masheryLogo['onmouseout'] = function() {
                    this.style.cursor = 'auto';
                };
            }
        </script>
        <!-- End Branding script tag -->
            <!-- <div id="extra1">&nbsp;</div>
            <div id="extra2">&nbsp;</div> -->

        <script type="text/javascript" src="/public/Mashery/scripts/themes/blackbeard/app.js"></script><div id="app-wrapper" class="category-docs single-docs-american_football-nfl_v7"><!-- Old Browser Warning --><!--[if lt IE 9]><section class="container">Did you know that your web browser is a bit old? Some of the content on this site might not work right as a result. <a href="http://whatbrowser.org">Upgrade your browser</a> for a faster, better, and safer web experience.</section><![endif]--><div id="app" class="tabindex" tabindex="-1"><a class="screen-reader screen-reader-focusable" href="#main-wrapper">Skip to content</a><nav id="nav-primary-wrapper"><div class="nav-primary nav-wrap" id="nav-primary"><div class="container padding-top-small padding-bottom-small"><a id="logo" class="logo" href="/"><img height="35" width="202" alt="Sportradar Developer Portal" src="https://developer.sportradar.com/files/logo.svg"></a><div class="nav-toggle-wrap"><a role="button" class="nav-toggle" id="nav-primary-toggle" data-nav-toggle=".nav-collapse" href="#">☰ Menu</a><a role="button" class="nav-toggle margin-right js-scroll-ignore" id="nav-docs-toggle" href="#">⋮ Docs Navigation</a></div><div class="nav-menu nav-collapse" id="nav-primary-menu"><ul class="nav" id="nav-primary-list"><li><a href="https://developer.sportradar.com/api_gallery">COVERAGE</a></li><li><a href="https://developer.sportradar.com/API_Packaging">PACKAGES</a></li><li><a href="https://developer.sportradar.com/docs/read/Home">DOCUMENTATION</a></li><li><a href="https://developer.sportradar.com/io-docs">API SANDBOX</a></li><li><a href="https://developer.sportradar.com/API_Release_Log">RELEASE LOG</a></li></ul></div></div></div></nav><nav id="nav-user-wrapper"><div class="nav-user container" id="nav-user"><div class="nav-menu nav-collapse" id="nav-user-menu"><ul class="nav-user-list list-inline text-muted text-right-large padding-top-small padding-bottom-small no-margin-bottom" id="nav-user-list"><li id="nav-user-signin"><a href="https://developer.sportradar.com/login/login?r=https%3A%2F%2Fdeveloper.sportradar.com%2Fdocs%2Fread%2Famerican_football%2FNFL_v7&amp;h=e84943167108d43c0e65fd5ac5fd87ac">Sign In</a></li><li id="nav-user-register"><a href="/member/register">Register</a></li></ul></div></div></nav><!-- tabindex="-1" hack for skipnav link: https://code.google.com/p/chromium/issues/detail?id=37721 --><main class="tabindex" tabindex="-1" id="main-wrapper"><div class="main" id="main"><div class="row row-docs"><div class="grid-docs grid-flip content better-docs-content better-docs-wide-content offside-sliding-element"><div class="better-docs-nav"><ul><li><a role="button" data-lang="bash" href="#lang-bash" class="active">Bash</a></li><li><a role="button" data-lang="ruby" href="#lang-ruby">Ruby</a></li><li><a role="button" data-lang="python" href="#lang-python">Python</a></li></ul></div><h1>NFL v7</h1>
<p><a name="top"></a><br>
<button class="btn btn-pdf btn-large btn-block summary js-right-height-content" onclick="window.open('/files/Sportradar_NFL_v7_Statistics_Summary.pdf','','scrollbars=yes,resizable=yes');return false;" style="text-decoration:none;font-size:140%">Statistics Summary</button><br>
<button class="btn btn-pdf btn-large btn-block feeds js-right-height-content" onclick="window.open('/files/Sportradar_NFL_v7_Statistics_Feeds.pdf','','scrollbars=yes,resizable=yes');return false;" style="text-decoration:none;font-size:140%">Documentation</button><br>
<button class="btn btn-pdf btn-large btn-block log js-right-height-content" onclick="window.open('/files/NFL_API_v7_Change_Log.pdf','','scrollbars=yes,resizable=yes');return false;" style="text-decoration:none;font-size:140%">Change Log</button><br>
<a href="#FAQNFLv7" class="btn btn-block js-right-height-content js-scroll float-middle" data-options="{ &quot;easing&quot;: &quot;linear&quot; }" style="height: 50px;vertical-align: middle;text-decoration:none;font-size:140%">Frequently Asked Questions</a></p>
<table class="basetable version">
<thead>
<tr>
<td colspan="2" style="width:350px ;text-align:center" class="heading"><b>Quick Access</b></td>
</tr>
<tr>
<td style="width:350px ;text-align:center" class="heading"><b>Postman Collection</b></td>
<td style="width:350px ;text-align:center" class="heading"><b>XSD Schema</b></td>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="https://app.getpostman.com/run-collection/782198-7634cb11-9938-4bb6-a255-4f4c94e5738c?action=collection%2Ffork&amp;collection-url=entityId%3D782198-7634cb11-9938-4bb6-a255-4f4c94e5738cfeea0de%26entityType%3Dcollection%26workspaceId%3Da6193b92-ee53-4979-bbfe-7ffdc589c3fc"><img src="https://run.pstmn.io/button.svg"></a></td>
<td style="text-align:center" class="heading"><a href="/files/NFL_v7.zip">Download</a></td>
</tr>
</tbody>
</table>
<h2 id="nfl-api-overview">NFL API Overview</h2>
<p>Sportradar’s NFL API offers a comprehensive suite of game and seasonal stats. Whether you are looking for the fastest gameday updates, your favorite player’s season stats, or in-depth subjective statistics, Sportradar has you covered.</p>
<p>All game data feeds update in real-time as games are played and are compiled via expert Sportradar in-house operators. All NFL games – including preseason – feature full play-by-play coverage.</p>
<p>Primary feeds will return schedules, standings, team/player data, and real-time scores.</p>
<p>Additional feeds provide a host of complementary stats, including:  </p>
<ul><li>Team rosters</li>
<li>Depth charts</li>
<li>Weekly injuries</li>
<li>Seasonal statistics</li>
<li>Subjective statistics</li>
<li>Draft information</li></ul>
<p>Real-time customers are also offered four delivery <a href="#Push">Push Feeds</a> to enhance speed.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:315px ;text-align:center" class="heading"><b>API</b></td>
<td style="width:315px ;text-align:center" class="heading"><b>API Version</b></td>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center" class="heading">NFL</td>
<td style="text-align:center">v7</td>
</tr>
</tbody>
</table>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Authentication is required for all API calls.
</td>
</tr></thead><tbody>
</tbody></table>
<h2 id="nfl-v7-api-map">NFL v7 API Map</h2>
<p><a name="mapv7"></a></p>
<p>To best utilize the NFL API v7, you will need several parameters to create your API calls. The map below illustrates how you can obtain the parameters you need.</p>
<blockquote>
  <p><ins></ins></p><h3>Examples:</h3><p></p>
  <p>To find the team a player was drafted by:</p>
  <ol><li>Call the season or weekly schedule and find a Game Id that they played in</li><li>Call the Game Roster using the Game Id to get the Player Id</li><li>Call the Player Profile and locate the Player Draft Team Alias.</li></ol>
  <p>The Alias maps to the team that drafted the player.</p>
  <ol></ol>
  <p>To find a teams number of defensive sacks:</p>
  <ol><li>Call the season or weekly schedule and find the desired Team Id</li><li>Call the Seasonal Statistics using the Team Id</li><li>Locate the Team Defense Sacks.</li></ol>
  <p>The teams number of defensive sacks is displayed.</p>
</blockquote>
<p>Primary and additional feeds only require dates or human-readable parameters, while other feeds require a global unique identifier (GUID) to identify the game, team, or player that the feed will describe. The primary feeds provide GUIDs for games and teams, while games and teams provide GUIDS for players.</p>
<p><img style="margin:0px auto;display:block" src="/files/NFLv7.svg"></p>
<h2 id="simulations">Simulations</h2>
<p>Our enhanced NFL API simulations allow you to replay games on your own schedule.</p>
<p>With the replayer, you can request a list of available recordings (by league), register a session (starting a session allows the API to be replayed back in natural time specific to the session), then continually poll the endpoint for updates as one would during a live game.</p>
<p><i>Note: This simulation does not require an API key or any authentication.</i></p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Replay simulations are currently available exclusively for RESTful NFL and NCAA Football API endpoints.
</b></td>
</tr></thead><tbody>
</tbody></table>
<h3>Fetching Available Recordings</h3>
<p>To see a list of available recordings the below graphQL endpoint can be used.</p>
<p><b>Sample Call</b><br>
curl --location --request POST 'https://playback.sportradar.com/graphql' \<br>
--header 'Content-Type: application/json' \<br>
--data-raw '{"query":"query getRecordings($league: String){\n  recordings(league: $league){\n    id\n    scheduled\n    meta\n    league\n    start\n    end\n    title\n    apis {\n      name\n      description\n      formats\n    }\n  }\n}","variables":{"league":"nfl"}}'</p>
<p>The above query is specific to the NFL ("league":"nfl"). NCAA Football is also available ("league":"ncaafb"). </p>
<p>Here is an NFL example response:</p>
<p><img style="margin:0px auto;display:block" src="../../../files/NFL_Simulation_Response.png"></p>
<h3>Register Your Session for Replay</h3>
<p>Once you have selected a recording you wish to replay, you may start a session. Start a session using the <code>id</code> of the desired recording. At this point the specific feed - if multiple feeds are available - does not matter.</p>
<p>For example:</p>
<p><img style="margin:0px auto;display:block" src="../../../files/NFL_Simulation_Response_2.png"></p>
<p>The above recording includes Play-By-Play, Game Boxscore, Game Roster, and Game Statistics endpoints (all available in json or xml). </p>
<p>For the next step the <code>recordingId</code> is needed (<i>50d7e8f3-a1ce-4fcf-bb15-f8a2ad919e34</i> in the above sample), whether you want to replay one or all available options.</p>
<p><b>Sample Call</b><br>
curl --location --request POST 'https://playback.sportradar.com/graphql' \<br>
--header 'Content-Type: application/json' \<br>
--data-raw '{"query":"mutation CreateSession($input: CreateSessionInput!) {\n    createSession(input: $input)\n }","variables":{"input":{"recordingId":"50d7e8f3-a1ce-4fcf-bb15-f8a2ad919e34"}}}'</p>
<p>In the above, <code>recordingId</code> is the id from the example response. This request will return your unique <code>sessionId</code> to be used in subsequent data API requests.</p>
<p>Example <code>sessionId</code> response:<br>
<code class="language-json">{"data":{"createSession":"60414140-53c7-11ed-bd68-ad2289887b03_-5507944226"}}
</code></p>
<h3>Make an API Request</h3>
<p>Here is a sample of a <b>Game Boxscore</b> request for <code>recordingId</code> <i>50d7e8f3-a1ce-4fcf-bb15-f8a2ad919e34</i> with a <code>contentType</code> of <i>json</i>:</p>
<p><b>Sample Call</b><br>
  curl --location --request GET 'https://playback.sportradar.com/replay/nfl/50d7e8f3-a1ce-4fcf-bb15-f8a2ad919e34?feed=boxscore&amp;contentType=json&amp;sessionId=[sessionId]'</p>
<p>To receive data updates you can now continually request this path, as you would with live game data in our RESTful APIs.</p>
<p>https://playback.sportradar.com/<code>{league}</code>/<code>{recordingId}</code>?feed=<code>{feed}</code>&amp;contentType=<code>{contentType}</code>&amp;sessionId=<code>{sessionId}</code></p>
<h3>Path Parameters</h3>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>league</code></td>
<td>Desired league for the simulation.<br><code>nfl</code> or <code>ncaafb</code></td>
</tr>
<tr>
<td><code>recordingId</code></td>
<td>ID of the recording.<br>(ex. 50d7e8f3-a1ce-4fcf-bb15-f8a2ad919e34)</td>
</tr>
</tbody>
</table>
<h3>Query String Parameters</h3>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>feed</code></td>
<td>Desired feed for the simulation.<br><code>boxscore</code>, <code>game</code>, <code>pbp</code>, <code>rosters</code></td>
</tr>
<tr>
<td><code>contentType</code></td>
<td>Desired content type.<br><code>json</code> or <code>xml</code></td>
</tr>
<tr>
<td><code>sessionId</code></td>
<td>Session ID returned by the session request.<br>(ex. aa23f380-2234-11ed-8a8a-cbecc410da60_-137242789)</td>
</tr>
</tbody>
</table>
<h2 id="current-season-schedule">Current Season Schedule</h2>
<p>Provides schedule information for the current season, including venue and broadcast info, and scoring results by quarter.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">10 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Overtime Points <br>Away Team Points for Quarter <br>Away Team Total Points </td>
<td style="width:170px">Home Team Overtime Points <br>Home Team Points for Quarter <br>Home Team Total Points <br>Overtime Id <br>Overtime Number </td>
<td style="width:170px">Overtime Sequence <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Game Information Data Points:</b></td>
<td>Away Team Alias <br>Away Team Full Name <br>Away Team Game Number <br>Away Team Id <br>Away Team Name <br>Away Team SR Id <br>Broadcast Internet <br>Broadcast Network </td>
<td>Broadcast Satellite <br>Conference Game <br>Duration <br>Entry Mode <br>Home Team Alias <br>Home Team Full Name <br>Home Team Game Number <br>Home Team Id <br>Home Team Name <br>Home Team SR Id </td>
<td>Id <br>Number <br>Scheduled Start Date/Time <br>SR Id <br>Status <br>Weather - Condition <br>Weather - Humidity <br>Weather - Temperature <br>Wind Direction <br>Wind Speed </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Bye Week Team Alias <br>Bye Week Team Id <br>Bye Week Team Name <br>Bye Week Team SR Id </td>
<td>Season Id <br>Season Name <br>Season Type <br>Season Year </td>
<td>Week Id <br>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Schedule for the current season below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/current_season/schedule.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/current_season/schedule.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/current_season/schedule.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Current_Season_Schedule_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Current Season Schedule feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/current_season/schedule.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Schedule use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd">https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="current-week-schedule">Current Week Schedule</h2>
<p>Provides schedule information for the current week, including venue and broadcast info, and scoring results by quarter.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">10 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Hourly</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Overtime Points <br>Away Team Points for Quarter <br>Away Team Total Points </td>
<td style="width:170px">Home Team Overtime Points <br>Home Team Points for Quarter <br>Home Team Total Points <br>Overtime Id <br>Overtime Number </td>
<td style="width:170px">Overtime Sequence <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Game Information Data Points:</b></td>
<td>Away Team Alias <br>Away Team Full Name <br>Away Team Game Number <br>Away Team Id <br>Away Team Name <br>Away Team SR Id <br>Broadcast Internet <br>Broadcast Network </td>
<td>Broadcast Satellite <br>Conference Game <br>Duration <br>Entry Mode <br>Home Team Alias <br>Home Team Full Name <br>Home Team Game Number <br>Home Team Id <br>Home Team Name <br>Home Team SR Id </td>
<td>Id <br>Number <br>Scheduled Start Date/Time <br>SR Id <br>Status <br>Weather - Condition <br>Weather - Humidity <br>Weather - Temperature <br>Wind Direction <br>Wind Speed </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Bye Week Team Alias <br>Bye Week Team Id <br>Bye Week Team Name <br>Bye Week Team SR Id </td>
<td>Season Id <br>Season Name <br>Season Type <br>Season Year </td>
<td>Week Id <br>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Schedule for the current week below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/current_week/schedule.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/current_week/schedule.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/current_week/schedule.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Current_Week_Schedule_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Current Week Schedule feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/current_week/schedule.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Schedule use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd">https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="daily-change-log">Daily Change Log</h2>
<p>Provides IDs and timestamps for teams, players, game statistics, schedules, and standings that have been modified on a given date. To receive the data updates, use these unique IDs to pull relevant API feeds.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Game Information Data Points:</b></td>
<td style="width:170px">Id <br>Last Modified </td>
<td style="width:170px">Season Id </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias <br>Change Log End Time </td>
<td style="width:170px">Change Log Start Time <br>Id </td>
<td style="width:170px">Name <br>Season Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Full Name <br>Id </td>
<td style="width:170px">Last Modified </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Last Modified <br>Market </td>
<td style="width:170px">Name <br>SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Daily Change Log for 08/31/2021 replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/league/2021/08/31/changes.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/league/2021/08/31/changes.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/league/2021/08/31/changes.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Daily_Change_Log_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Daily Change Log feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/league/<code>{year}</code>/<code>{month}</code>/<code>{day}</code>/changes.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>month</code></td>
<td>Month in 2 digit format (MM).</td>
</tr>
<tr>
<td><code>day</code></td>
<td>Day of month in 2 digit format (DD).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Daily Change Log, use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/changelog-v7.0.xsd">https://feed.elasticstats.com/schema/football/changelog-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="daily-transactions">Daily Transactions</h2>
<p>Provides information for all transactions added or edited during the league-defined day.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">First Name <br>Full Name <br>Id </td>
<td style="width:170px">Jersey Number <br>Last Name </td>
<td style="width:170px">Position <br>Sportradar Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Transaction Information Data Points:</b></td>
<td style="width:170px">End Time <br>From Team Alias <br>From Team ID <br>From Team Market <br>From Team Name <br>From Team Sportradar ID <br>Start Time <br>To Team Alias </td>
<td style="width:170px">To Team ID <br>To Team Market <br>To Team Name <br>To Team Sportradar ID <br>Trade ID <br>Trade Date <br>Transaction Code <br>Transaction Description </td>
<td style="width:170px">Transaction Effective Date <br>Transaction ID <br>Transaction Last Modified <br>Transaction Status After <br>Transaction Status Before <br>Transaction Type <br>Transaction Year </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Daily Transactions for 07/14/2022 replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/league/2022/07/14/transactions.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/league/2022/07/14/transactions.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/league/2022/07/14/transactions.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Daily_Transactions_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
  <p>Click <a onclick="window.open('/files/NFL_Daily_Transactions_Sample_v7_2.xml','','scrollbars=yes,resizable=yes');return false;">here</a> for a trade sample.</p>
</blockquote>
<p>Access the Daily Transactions feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/league/<code>{year}</code>/<code>{month}</code>/<code>{day}</code>/transactions.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>month</code></td>
<td>Month in 2 digit format (MM).</td>
</tr>
<tr>
<td><code>day</code></td>
<td>Day of month in 2 digit format (DD).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Daily Transactions, use the following URL.</p>
<p><a href="http://feed.elasticstats.com/schema/football/transactions-v7.0.xsd">http://feed.elasticstats.com/schema/football/transactions-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="draft-summary">Draft Summary</h2>
<p>Provides pre-draft pick order with live pick selections during the draft. Displays information on draft rounds, picks, teams, and prospects for a given draft year.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">2 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Broadcast Channel <br>Broadcast Internet <br>Broadcast Network <br>Draft End Date <br>Draft Id <br>Draft Start Date <br>Draft Status <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name <br>Draft Year <br>Pick Compensatory <br>Pick Id <br>Pick Number <br>Pick Overall </td>
<td style="width:170px">Pick Traded <br>Round End Date <br>Round Id <br>Round Number <br>Round Start Date <br>Round Status <br>Trade Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Prospect Birth Place <br>Prospect Experience <br>Prospect First Name <br>Prospect Height <br>Prospect Id </td>
<td style="width:170px">Prospect Last Name <br>Prospect League Id <br>Prospect Name <br>Prospect Position <br>Prospect Publishable</td>
<td style="width:170px">Prospect Source Id <br>Prospect Team Name <br>Prospect Top Prospect <br>Prospect Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>City </td>
<td style="width:170px">Country <br>Name </td>
<td style="width:170px">State </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Draft Summary for 2021 replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/v1/en/2021/draft.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/draft/nfl/trial/v1/en/2021/draft.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/draft/nfl/trial/v1/en/2021/draft.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Draft_Summary_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Draft Summary feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/<code>{year}</code>/draft.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the Draft API you are accessing (current version: v1). NOTE: All draft feeds are currently v1.</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Draft Summary, use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/draft/summary-v1.0.xsd">https://feed.elasticstats.com/schema/draft/summary-v1.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="game-boxscore">Game Boxscore</h2>
<p>Provides game scoring information for each team, including complete play-by-play information for all scoring drives.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Realtime</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td>Live - <b>2s</b><br>Non-Live - <b>120s</b> </td>
<td colspan="2"><i>Note: This endpoint will update to a 2s TTL (time to live) upon a game moving to <b>inprogress</b>. Upon <b>closed</b>, it will transfer to 120s.</i></td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Styled XML or Raw JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Challenges Remaining <br>Away Team Challenges Used <br>Away Team Coin Toss Decision <br>Away Team Coin Toss Direction <br>Away Team Coin Toss Outcome <br>Away Team Overtime Points <br>Away Team Points for Quarter <br>Away Team Timeouts Remaining <br>Away Team Timeouts Used <br>Away Team Total Points <br>Clock <br>Coin Toss Quarter <br>Current Situation Clock <br>Current Situation Down <br>Current Situation Team Alias <br>Current Situation Team Id <br>Current Situation Team Market <br>Current Situation Team Name <br>Current Situation Team SR Id </td>
<td style="width:170px"> <br>Current Situation Team Yardline <br>Current Situation Possession Team Alias <br>Current Situation Possession Team Id <br>Current Situation Possession Team Market <br>Current Situation Possession Team Name <br>Current Situation Possession Team SR Id <br>Current Situation Yards to First Down <br>Home Team Challenges Remaining <br>Home Team Challenges Used <br>Home Team Coin Toss Decision <br>Home Team Coin Toss Direction <br>Home Team Coin Toss Outcome <br>Home Team Overtime Points <br>Home Team Points for Quarter <br>Home Team Timeouts Remaining <br>Home Team Timeouts Used <br>Home Team Total Points </td>
<td style="width:170px">Last Event Clock <br>Last Event Created At <br>Last Event Deleted <br>Last Event Description <br>Last Event Id <br>Last Event Sequence <br>Last Event Source <br>Last Event Type <br>Last Event Updated At <br>Last Event Wall Clock <br>Overtime Id <br>Overtime Number <br>Overtime Sequence <br>Quarter <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Game Information Data Points:</b></td>
<td style="width:170px">Away Team Alias <br>Away Team Id <br>Away Team Market <br>Away Team Name <br>Away Team SR Id <br>Conference Game <br>Coverage <br>Duration <br>Entry Mode <br>Home Team Alias <br>Home Team Id </td>
<td style="width:170px">Home Team Market <br>Home Team Name <br>Home Team SR Id <br>Game Id <br>Game Number <br>Game Scheduled Start Date/Time </td>
<td style="width:170px">Game Type <br>Neutral Site <br>SR Id <br>Status <br>Weather Condition <br>Weather - Humidity <br>Weather - Temp <br>Wind Direction <br>Wind Speed </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Season Id <br>Season Name <br>Season Type </td>
<td style="width:170px">Season Year <br>Week Id </td>
<td style="width:170px">Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Play By Play Information Data Points:</b></td>
<td style="width:170px">Detail Category <br>Detail Description <br>Detail Direction <br>Detail End Location - Team Alias <br>Detail End Location - Yardline <br>Detail First Touch <br>Detail No Attempt <br>Detail Onside <br>Detail Penalty - Description <br>Detail Penalty - No Play <br>Detail Penalty - Result <br>Detail Penalty - Safety <br>Detail Penalty - Yards <br>Detail Reason Missed <br>Detail Result <br>Detail - Sack Split <br>Detail Sequence <br>Detail Start Location - Team Alias <br>Detail Start Location - Yardline <br>Detail Yards <br>Drive Created At <br>Drive Duration <br>Drive End Reason <br>Drive First Downs <br>Drive Gain <br>Drive Id <br>Drive Inside 20 Flag <br>Drive Penalty Yards <br>Drive Play Count <br>Drive Scoring Drive Flag <br>Drive Sequence <br>Drive Start Reason <br>Drive Updated At <br>Ending Situation Clock <br>Ending Situation Down <br>Ending Situation - Location - Team Alias <br>Ending Situation - Location - Team Id </td>
<td style="width:170px">Ending Situation - Location - Team Market <br>Ending Situation - Location - Team Name <br>Ending Situation - Location - Team SR Id <br>Ending Situation - Location - Team Yardline <br>Ending Situation - Possession - Team Alias <br>Ending Situation - Possession - Team Id <br>Ending Situation - Possession - Team Market <br>Ending Situation - Possession - Team Name <br>Ending Situation - Possession - Team SR Id <br>Ending Situation - Yards to First Down <br>Event Clock <br>Event Created At <br>Event Description <br>Event Id <br>Event Sequence <br>Event Type <br>Event Updated At <br>Play Away Points <br>Play Blitz <br>Play Created At <br>Play Description <br>Play Fake Field Goal <br>Play Fake Punt <br>Play Hash Mark <br>Play Home Points <br>Play Huddle <br>Play Id <br>Play Left Tightends <br>Play Men in Box <br>Play Pass Route <br>Play Play Action <br>Play Play Clock <br>Play Play Direction <br>Play Players Rushed <br>Play Pocket Location <br>Play QB at Snap </td>
<td style="width:170px">Play Right Tightends <br>Play Run Pass Option <br>Play Running Lane <br>Play Scoring Play <br>Play Screen Pass <br>Play Sequence <br>Play Type <br>Play Updated At <br>Play Wall Clock <br>Quarter Id <br>Quarter Number <br>Quarter Sequence <br>Points After - Play Id <br>Points After - Score Type <br>Points After - Sequence <br>Scoring - Away Team Score <br>Scoring - Clock <br>Scoring - Home Team Score <br>Scoring - Points <br>Scoring - Sequence <br>Starting Situation Clock <br>Starting Situation Down <br>Starting Situation Location - Team Alias <br>Starting Situation Location - Team Id <br>Starting Situation Location - Team Market <br>Starting Situation Location - Team Name <br>Starting Situation - Location - Team SR Id <br>Starting Situation Location - Team Yardline <br>Starting Situation Possession - Team Alias <br>Starting Situation Possession - Team Id <br>Starting Situation Possession - Team Market <br>Starting Situation Possession - Team Name <br>Starting Situation - Possession - Team SR Id <br>Starting Situation Yards to First Down </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Play Statistics Data Points:</b></td>
<td style="width:170px">Block Category <br>Blocks <br>Conversion Attempt <br>Conversion Category <br>Conversion Complete <br>Coversion of Safety <br>Defense Assisted Sacks <br>Defense Assisted Tackles <br>Defense Assisted Tackles for Loss<br>Defense Batted Pass <br>Defense Blitz <br>Defense Block <br>Defense Category <br>Defense Conversion Attempt <br>Defense Conversion Category <br>Defense Conversion Complete <br>Defense Defensive Completion <br>Defense Defensive Target <br>Defense Forced Fumble <br>Defense Hurry <br>Defense Interception <br>Defense Interception Touchdown <br>Defense Interception Yards <br>Defense Knockdown <br>Defense Missed Tackles <br>Defense Nullified Play Flag <br>Defense Pass Defended <br>Defense Primary <br>Defense QB Hit <br>Defense Sack <br>Defense Sack Yards <br>Defense Safety <br>Defense Tackle for Loss <br>Defense Tackle for Loss Yards <br>Defense Tackle <br>Down Conversions Attempt <br>Down Conversions Complete <br>Down Conversions Down <br>Extra Point Aborted <br>Extra Point Attempt <br>Extra Point Blocked <br>Extra Point Made <br>Extra Point Missed <br>Extra Point Returned <br>Extra Point Safety <br>Field Goal Attempt <br>Field Goal Attempt Yards <br>Field Goal Blocked <br>Field Goal Made <br>Field Goal Missed <br>Field Goal Returned <br>Field Goal Nullified <br>Field Goal Yards <br>First Down Category </td>
<td style="width:170px">Fumbles Forced <br>Fumbles Fumble <br>Fumbles Lost <br>Fumbles Nullified <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdown <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdown <br>Fumbles Own Recovery Yards <br>Fumbles Play Category <br>Kickoffs End Zone <br>Kickoffs Gross Yards <br>Kickoffs Inside 20 <br>Kickoffs Kickoff <br>Kickoffs Nullified <br>Kickoffs Onside Attempt <br>Kickoffs Onside Success <br>Kickoffs Own Recovery <br>Kickoffs Own Recovery Touchdown <br>Kickoffs Squib Kick <br>Kickoffs Touchback <br>Kickoffs Yards <br>Passing Attempt <br>Passing Attempt Yards <br>Passing Batted Pass <br>Passing Blitz <br>Passing Completion <br>Passing First Down <br>Passing Goal to Go <br>Passing Hurry <br>Passing Incompletion Type <br>Passing Inside 20 <br>Passing Interception <br>Passing Interception Touchdown <br>Passing Knockdown <br>Passing Nullified <br>Passing On Target Throws <br>Passing Pocket Time <br>Passing Sack <br>Passing Sack Yards <br>Passing Safety <br>Passing Touchdown <br>Passing Yards <br>Penalties Penalty <br>Penalties Yards <br>Punting Attempt <br>Punting Blocked <br>Punting Downed <br>Punting Endzone </td>
<td style="width:170px">Punting Fair Catch <br>Punting Hang Time <br>Punting Inside 20 <br>Punting Nullified <br>Punting Out of Bounds <br>Punting Touchback <br>Punting Yards <br>Receiving Broken Tackles <br>Receiving Catchable <br>Receiving Dropped <br>Receiving First Down <br>Receiving Goal to Go <br>Receiving Inside 20 <br>Receiving Nullified <br>Receiving Reception <br>Receiving Safety <br>Receiving Target <br>Receiving Touchdown <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Returns Category <br>Returns Downed <br>Returns Fair Catch <br>Returns First Down <br>Returns Lateral <br>Returns Nullified <br>Returns Out of Bounds <br>Returns Play Category <br>Returns Return <br>Returns Touchback <br>Returns Touchdown <br>Returns Yards <br>Rushing Attempt <br>Rushing Broken Tackles <br>Rushing First Down <br>Rushing Goal to Go <br>Rushing Inside 20 <br>Rushing Kneel Down <br>Rushing Lateral <br>Rushing Nullified <br>Rushing Safety <br>Rushing Scramble <br>Rushing Tackle for Loss <br>Rushing Tackle for Loss Yards <br>Rushing Touchdown <br>Rushing Yards <br>Rushing Yards After Contact </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Full Name <br>Id </td>
<td style="width:170px">Jersey Number <br>Position </td>
<td style="width:170px">Role <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Standings Information Data Points:</b></td>
<td style="width:170px">Overall Losses </td>
<td style="width:170px">Overall Ties </td>
<td style="width:170px">Overall Wins </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id <br>Market </td>
<td style="width:170px">Name <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Game Boxscore for the Game ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/boxscore.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/boxscore.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/boxscore.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Game_Boxscore_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Game Boxscore feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{game_id}</code>/boxscore.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>game_id</code></td>
<td>ID for a given game.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Game Boxscore use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/boxscore-v7.0.xsd">https://feed.elasticstats.com/schema/football/boxscore-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="game-roster">Game Roster</h2>
<p>Provides complete game roster information for each team, including game status and player profile data.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Realtime</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td>Live - <b>2s</b><br>Non-Live - <b>120s</b> </td>
<td colspan="2"><i>Note: This endpoint will update to a 2s TTL (time to live) upon a game moving to <b>inprogress</b>. Upon <b>closed</b>, it will transfer to 120s.</i></td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Styled XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Clock </td>
<td style="width:170px">Quarter <br>Officials Assignment </td>
<td style="width:170px">Officials Full Name <br>Officials Number </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Draft Number <br>Draft Round <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name </td>
<td style="width:170px">Draft Team SR Id <br>Draft Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Game Information Data Points:</b></td>
<td style="width:170px">Away Team Alias <br>Away Team Id <br>Away Team Market <br>Away Team Name <br>Away Team SR Id <br>Conference Game <br>Coverage <br>Duration <br>Entry Mode </td>
<td style="width:170px">Home Team Alias <br>Home Team Id <br>Home Team Market <br>Home Team Name <br>Home Team SR Id <br>Game Id </td>
<td style="width:170px">Game Number <br>Game Scheduled Start Date/Time <br>Game Title<br>Game Type <br>Neutral Site <br>SR Id <br>Status <br>Weather </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Season Id <br>Season Name <br>Season Type </td>
<td style="width:170px">Season Year <br>Week Id </td>
<td style="width:170px">Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Abbreviated Name <br>Age (at time of game) <br>Birth Date <br>Birth Place <br>College <br>College Conference <br>Draft Number <br>Draft Round <br>Draft Year <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name <br>Draft Team SR Id<br>First Name <br>Full Name <br>Game Status <br>Height <br>High School <br>Id <br>In-Game Status </td>
<td style="width:170px">Jersey Number <br>Last Name <br>Name Suffix <br>Position <br>Preferred Name <br>SR Id <br>Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Standings Information Data Points:</b></td>
<td style="width:170px">Overall Losses </td>
<td style="width:170px">Overall Ties </td>
<td style="width:170px">Overall Wins </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Coach First Name  <br>Coach Full Name <br>Coach Id </td>
<td style="width:170px">Coach Last Name <br>Name Suffix <br>Coach Position <br>Id </td>
<td style="width:170px">Market <br>Name <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Game Roster for the Game ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/roster.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/roster.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/roster.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Game_Roster_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Game Roster feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{game_id}</code>/roster.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>game_id</code></td>
<td>ID for a given game.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Game Roster use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/roster-v7.0.xsd">https://feed.elasticstats.com/schema/football/roster-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="game-statistics">Game Statistics</h2>
<p>Provides extensive team and player level game statistics for each team.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Realtime</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td>Live - <b>2s</b><br>Non-Live - <b>120s</b> </td>
<td colspan="2"><i>Note: This endpoint will update to a 2s TTL (time to live) upon a game moving to <b>inprogress</b>. Upon <b>closed</b>, it will transfer to 120s.</i></td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Styled XML or Raw JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Challenges Remaining <br>Away Team Challenges Used <br>Away Team Timeouts Remaining <br>Away Team Timeouts Used </td>
<td style="width:170px">Away Team Total Points <br>Clock <br>Home Team Challenges Remaining <br>Home Team Challenges Used <br>Home Team Timeouts Remaining </td>
<td style="width:170px">Home Team Timeouts Used <br>Home Team Total Points <br>Quarter </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Game Information Data Points:</b></td>
<td style="width:170px">Away Team Alias <br>Away Team Id <br>Away Team Market <br>Away Team Name <br>Away Team SR Id <br>Conference Game <br>Duration <br>Entry Mode </td>
<td style="width:170px">Home Team Alias <br>Home Team Id <br>Home Team Market <br>Home Team Name <br>Home Team SR Id <br>Game Id </td>
<td style="width:170px">Game Number <br>Game Scheduled Start Date/Time <br>SR Id <br>Status <br>Weather - Condition <br>Weather - Humidity <br>Weather - Temperature <br>Wind Direction <br>Wind Speed </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Game Statistics Data Points:</b></td>
<td>Conversions Attempts <br>Conversion Category <br>Conversion Successes <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense 4th Down Stops <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Defense Three and Outs Forced <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Missed <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards <br>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed <br>Field Goals Percent <br>Field Goal Yards <br>Fumbles End Zone Touchdowns </td>
<td>Fumbles Force Fumbles <br>Fumbles Fumbles <br>Fumbles Lost Fumbles <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Interception Returns Average Yards <br>Interception Returns Longest <br>Interception Returns Longest Touchdown <br>Interception Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns Longest <br>Kick Returns Longest Touchdown <br>Kick Returns Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Onside Attempts <br>Kickoffs Onside Successes <br>Kickoffs Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Squib Kicks <br>Kickoffs Total Endzone <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Pocket Time <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing First Downs <br>Passing Hurries <br>Passing Interception Touchdowns <br>Passing Interceptions <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing On Target Throws <br>Passing Pocket Time <br>Passing Poor Throws <br>Passing Rating <br>Passing Red Zone Attempts </td>
<td>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalty First Downs <br>Penalty Yards <br>Punt Return Average Yards <br>Punt Return Fair Catches <br>Punt Return Longest <br>Punt Return Longest Touchdown <br>Punt Returns <br>Punt Return Touchdowns <br>Punt Return Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catchable Passes <br>Receiving Dropped Passes <br>Receiving First Downs <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing First Downs <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackle for Loss <br>Rushing Tackle for Loss Yards <br>Rushing Touchdowns <br>Rushing Yards <br>Rushing Yards After Contact </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Team Game Statistics Data Points:</b></td>
<td>Conversions Defense Attempts <br>Conversions Defense Successes <br>Conversions Pass Attempts <br>Conversions Pass Successes <br>Conversions Rush Attempts <br>Conversions Rush Successes <br>Conversions Turnover Successes <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Efficiency 3rd Down Attempts <br>Efficiency 3rd Down Conversions <br>Efficiency 3rd Down Percentage <br>Efficiency 4th Down Attempts <br>Efficiency 4th Down Conversions <br>Efficiency 4th Down Percentage <br>Efficiency Goal to Go Attempts <br>Efficiency Goal to Go Conversions <br>Efficiency Goal to Go Percentage <br>Efficiency Red Zone Attempts <br>Efficiency Red Zone Conversions <br>Efficiency Red Zone Percentage <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Missed <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards <br>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed </td>
<td>Field Goals Net Attempts <br>Field Goals Percent <br>Field Goals Yards <br>First Downs Passing <br>First Downs Penalty <br>First Downs Rushing <br>First Downs Total <br>Fumbles End Zone Touchdowns <br>Fumbles Force Fumbles <br>Fumbles Fumbles <br>Fumbles Lost Fumbles <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Interception Returns Average Yards <br>Interception Returns Longest <br>Interception Returns Longest Touchdown <br>Interception Returns Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Interceptions <br>Interceptions Return Yards <br>Interceptions Returned <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns Longest <br>Kick Returns Longest Touchdown <br>Kick Returns Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Total Endzone <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Misc Returns Blocked Field Goal Touchdowns <br>Misc Returns Blocked Punt Touchdowns <br>Misc Returns End Zone Recovery Touchdowns <br>Misc Returns Field Goal Return Touchdowns <br>Misc Returns Returns <br>Misc Returns Touchdowns <br>Misc Returns Yards <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing First Downs <br>Passing Gross Yards <br>Passing Hurries <br>Passing Interception Touchdowns <br>Passing Interceptions <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing Net Yards <br>Passing On Target Throws </td>
<td>Passing Pocket Time <br>Passing Rating <br>Passing Red Zone Attempts <br>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalty First Downs <br>Penalty Yards <br>Punt Returns Average Yards <br>Punt Returns Fair Catches <br>Punt Returns Longest <br>Punt Returns Longest Touchdown <br>Punt Returns <br>Punt Returns Touchdowns <br>Punt Returns Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catachable Passes <br>Receiving Dropped Passes <br>Receiving First Downs <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing First Downs <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackles for Loss <br>Rushing Tackles for Loss Yards <br>Rushing Touchdowns <br>Rushing Yards <br>Rushing Yards After Contact <br>Touchdowns Fumble Return <br>Touchdowns Interception Return <br>Touchdowns Kick Return <br>Touchdowns Other <br>Touchdowns Pass <br>Touchdowns Punt Return <br>Touchdowns Rush <br>Touchdowns Total <br>Touchdowns Total Return </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Team Summary Data Points:</b></td>
<td>Average Gain <br>Fumbles <br>Fumbles Lost <br>Penalties </td>
<td>Penalty Yards <br>Play Count <br>Possession Time <br>Return Yards </td>
<td>Rushing Plays <br>Safeties <br>Total Yards <br>Turnovers </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Season Id <br>Season Name <br>Season Type </td>
<td>Season Year <br>Week Id </td>
<td>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Information Data Points:</b></td>
<td>Full Name </td>
<td>Id <br>Jersey Number </td>
<td>Position <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Standings Information Data Points:</b></td>
<td style="width:170px">Overall Losses </td>
<td style="width:170px">Overall Ties </td>
<td style="width:170px">Overall Wins </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id <br>Market </td>
<td style="width:170px">Name <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Game Statistics for the Game ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/statistics.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/statistics.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/statistics.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Game_Statistics_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Game Statistics feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{game_id}</code>/statistics.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>game_id</code></td>
<td>ID for a given game.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for Game Statistics use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/statistics-v7.0.xsd">https://feed.elasticstats.com/schema/football/statistics-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="league-hierarchy">League Hierarchy</h2>
<p>Provides top-level information for each team, including conference and division distinction, venue information, and team colors.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Franchise Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">League Alias <br>Conference Alias <br>Conference Id </td>
<td style="width:170px">Conference Name <br>Division Alias <br>Division Id </td>
<td style="width:170px">Division Name <br>League Id <br>League Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Championship Seasons <br>Championships Won <br>Conference Titles <br>Division Titles <br>Id <br>Fight Song <br>General Manager </td>
<td style="width:170px">Market <br>Mascot <br>Name <br>Nicknames <br>Owner <br>Playoff Appearances <br>President <br>SR Id </td>
<td style="width:170px">Team Color Alpha <br>Team Color Hex Color <br>Team Color RGB Color Blue <br>Team Color RGB Color Green <br>Team Color RGB Color Red <br>Team Color Type <br>Year Founded </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the League Hierarchy replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/league/hierarchy.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/league/hierarchy.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/league/hierarchy.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_League_Hierarchy_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the League Hierarchy feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/league/hierarchy.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the League Hierarchy use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/nfl/hierarchy-v7.0.xsd">https://feed.elasticstats.com/schema/football/nfl/hierarchy-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="play-by-play">Play-By-Play</h2>
<p>Provides a live play-by-play timeline, including possession and location information as well as all team and player statistics earned on each play.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Realtime</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td>Live - <b>2s</b><br>Non-Live - <b>120s</b> </td>
<td colspan="2"><i>Note: This endpoint will update to a 2s TTL (time to live) upon a game moving to <b>inprogress</b>. Upon <b>closed</b>, it will transfer to 120s.</i></td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Challenges Remaining <br>Away Team Challenges Used <br>Away Team Coin Toss Decision <br>Away Team Coin Toss Direction <br>Away Team Coin Toss Outcome <br>Away Team Points for Quarter <br>Away Team Timeouts Remaining <br>Away Team Timeouts Used <br>Away Team Total Points <br>Clock </td>
<td style="width:170px">Coin Toss Quarter <br>Home Team Challenges Remaining <br>Home Team Challenges Used <br>Home Team Coin Toss Decision <br>Home Team Coin Toss Direction <br>Home Team Coin Toss Outcome <br>Home Team Points for Quarter <br>Home Team Timeouts Remaining <br>Home Team Timeouts Used </td>
<td style="width:170px">Home Team Total Points <br>Overtime Id <br>Overtime Number <br>Overtime Sequence <br>Quarter <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Game Information Data Points:</b></td>
<td style="width:170px">Away Team Alias <br>Away Team Id <br>Away Team Market <br>Away Team Name <br>Away Team SR Id <br>Conference Game <br>Duration <br>Entry Mode </td>
<td style="width:170px">Home Team Alias <br>Home Team Id <br>Home Team Market <br>Home Team Name <br>Home Team SR Id <br>Game Id </td>
<td style="width:170px">Game Number <br>Game Scheduled Start Date/Time <br>SR Id <br>Status <br>Weather </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Season Id <br>Season Name <br>Season Type </td>
<td style="width:170px">Season Year <br>Week Id </td>
<td style="width:170px">Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Play By Play Information Data Points:</b></td>
<td style="width:170px">Detail Category <br>Detail Description <br>Detail Direction <br>Detail End Location - Team Alias <br>Detail End Location - Yardline <br>Detail - First Touch <br>Detail No Attempt <br>Detail - Onside <br>Detail Penalty - Description <br>Detail Penalty - No Play <br>Detail Penalty - Result <br>Detail Penalty - Safety <br>Detail Penalty - Yards <br>Detail - Reason Missed <br>Detail Result <br>Detail - Sack Split <br>Detail Sequence <br>Detail Start Location - Team Alias <br>Detail Start Location - Yardline <br>Detail Yards <br>Drive Created At <br>Drive Defensive Team Id <br>Drive Defensive Team Points <br>Drive Duration <br>Drive End Clock <br>Drive End Reason <br>Drive First Downs <br>Drive First Drive Yardline <br>Drive Gain <br>Drive Id <br>Drive Inside 20 Flag <br>Drive Last Drive Yardline <br>Drive Net Yards <br>Drive Offensive Team Id <br>Drive Offensive Team Points <br>Drive PAT Points Attempted <br>Drive PAT Successful <br>Drive Penalty Yards <br>Drive Play Count <br>Drive Scoring Drive Flag <br>Drive Sequence <br>Drive Start Clock <br>Drive Start Reason <br>Drive Team Sequence <br>Drive Updated At <br>Ending Situation Clock <br>Ending Situation Down <br>Ending Situation - Location - Team Alias <br>Ending Situation - Location - Team Id <br>Ending Situation - Location - Team Market <br>Ending Situation - Location - Team Name <br>Ending Situation - Location - Team SR Id <br>Ending Situation - Location - Team Yardline </td>
<td style="width:170px">Ending Situation - Possession - Team Alias <br>Ending Situation - Possession - Team Id <br>Ending Situation - Possession - Team Market <br>Ending Situation - Possession - Team Name <br>Ending Situation - Possession - Team SR Id <br>Ending Situation - Yards to First Down <br>Event Clock <br>Event Created At <br>Event Description <br>Event Id <br>Event Sequence <br>Event Type <br>Event Updated At <br>Play Away Points <br>Play Blitz <br>Play Clock <br>Play Created At <br>Play Description <br>Play Fake Field Goal <br>Play Fake Punt <br>Play Hash Mark <br>Play Home Points <br>Play Huddle <br>Play Id <br>Play Left Tightends <br>Play Men in Box <br>Play Pass Route <br>Play Play Action <br>Play Play Direction <br>Play Players Rushed <br>Play Pocket Location <br>Play QB at Snap </td>
<td style="width:170px">Play Right Tightends <br>Play Run Pass Option <br>Play Running Lane <br>Play Scoring Play <br>Play Screen Pass <br>Play Sequence <br>Play Type <br>Play Updated At <br>Play Wall Clock <br>Quarter Id <br>Quarter Number <br>Quarter Sequence <br>Points After - Play Id <br>Points After - Score Type <br>Points After - Sequence <br>Scoring - Away Team Score <br>Scoring - Clock <br>Scoring - Home Team Score <br>Scoring - Points <br>Scoring - Sequence <br>Starting Situation Clock <br>Starting Situation Down <br>Starting Situation Location - Team Alias <br>Starting Situation Location - Team Id <br>Starting Situation Location - Team Market <br>Starting Situation Location - Team Name <br>Starting Situation Location - Team Yardline <br>Starting Situation Possession - Team Alias <br>Starting Situation Possession - Team Id <br>Starting Situation Possession - Team Market <br>Starting Situation Possession - Team Name <br>Starting Situation Yards to First Down </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Play Statistics Data Points:</b></td>
<td style="width:170px">Conversion Attempt <br>Conversion Category <br>Conversion Complete <br>Defense Assisted Sacks <br>Defense Assisted Tackles <br>Defense Assisted Tackles for Loss<br>Defense Batted Pass <br>Defense Blitz <br>Defense Block <br>Defense Category <br>Defense Conversion Attempt <br>Defense Conversion Category <br>Defense Conversion Complete <br>Defense Defensive Completion <br>Defense Defensive Target <br>Defense Forced Fumble <br>Defense Hurry <br>Defense Interception <br>Defense Interception Touchdown <br>Defense Interception Yards <br>Defense Knockdown <br>Defense Missed Tackles <br>Defense Nullified Play Flag <br>Defense Pass Defended <br>Defense Primary <br>Defense QB Hit <br>Defense Sack <br>Defense Sack Yards <br>Defense Safety <br>Defense Tackle for Loss <br>Defense Tackle for Loss Yards <br>Defense Tackle <br>Down Conversions Attempt <br>Down Conversions Complete <br>Down Conversions Down <br>Extra Point Aborted <br>Extra Point Attempt <br>Extra Point Blocked <br>Extra Point Made <br>Extra Point Missed <br>Extra Point Returned <br>Extra Point Safety <br>Field Goal Attempt <br>Field Goal Attempt Yards <br>Field Goal Blocked <br>Field Goal Made <br>Field Goal Missed <br>Field Goal Returned <br>Field Goal Nullified <br>Field Goal Yards <br>First Down Category </td>
<td style="width:170px">Fumbles Forced <br>Fumbles Fumble <br>Fumbles Lost <br>Fumbles Nullified <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdown <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdown <br>Fumbles Own Recovery Yards <br>Fumbles Play Category <br>Kickoffs End Zone <br>Kickoffs Gross Yards <br>Kickoffs Inside 20 <br>Kickoffs Kickoff <br>Kickoffs Nullified <br>Kickoffs Onside Attempt <br>Kickoffs Onside Success <br>Kickoffs Own Recovery <br>Kickoffs Own Recovery Touchdown <br>Kickoffs Squib Kick <br>Kickoffs Touchback <br>Kickoffs Yards <br>Passing Attempt <br>Passing Attempt Yards <br>Passing Batted Pass <br>Passing Blitz <br>Passing Completion <br>Passing First Down <br>Passing Goal to Go <br>Passing Hurry <br>Passing Incompletion Type <br>Passing Inside 20 <br>Passing Interception <br>Passing Interception Touchdown <br>Passing Knockdown <br>Passing Nullified <br>Passing On Target Throws <br>Passing Pocket Time <br>Passing Sack <br>Passing Sack Yards <br>Passing Safety <br>Passing Touchdown <br>Passing Yards <br>Penalties Penalty <br>Penalties Yards <br>Punting Attempt <br>Punting Blocked <br>Punting Downed <br>Punting Endzone </td>
<td style="width:170px">Punting Fair Catch <br>Punting Hang Time <br>Punting Inside 20 <br>Punting Nullified <br>Punting Out of Bounds <br>Punting Touchback <br>Punting Yards <br>Receiving Broken Tackles <br>Receiving Catchable <br>Receiving Dropped <br>Receiving First Down <br>Receiving Goal to Go <br>Receiving Inside 20 <br>Receiving Nullified <br>Receiving Reception <br>Receiving Safety <br>Receiving Target <br>Receiving Touchdown <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Returns Category <br>Returns Downed <br>Returns Fair Catch <br>Returns First Down <br>Returns Lateral <br>Returns Nullified <br>Returns Out of Bounds <br>Returns Play Category <br>Returns Return <br>Returns Touchback <br>Returns Touchdown <br>Returns Yards <br>Rushing Attempt <br>Rushing Broken Tackles <br>Rushing First Down <br>Rushing Goal to Go <br>Rushing Inside 20 <br>Rushing Kneel Down <br>Rushing Lateral <br>Rushing Nullified <br>Rushing Safety <br>Rushing Scramble <br>Rushing Tackle for Loss <br>Rushing Tackle for Loss Yards <br>Rushing Touchdown <br>Rushing Yards <br>Rushing Yards After Contact </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Full Name <br>Id </td>
<td style="width:170px">Jersey Number <br>Position </td>
<td style="width:170px">Role <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id <br>Market </td>
<td style="width:170px">Name <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Standings Information Data Points:</b></td>
<td style="width:170px">Overall Losses </td>
<td style="width:170px">Overall Ties </td>
<td style="width:170px">Overall Wins </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Play-By-Play for the Game ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/pbp.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/pbp.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/7d06369a-382a-448a-b295-6da9eab53245/pbp.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Play_By_Play_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Play-By-Play feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{game_id}</code>/pbp.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>game_id</code></td>
<td>ID for a given game.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for Play-By-Play use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/pbp-v7.0.xsd">https://feed.elasticstats.com/schema/football/pbp-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="player-profile">Player Profile</h2>
<p>Provides player biographical information, draft information, and seasonal statistics for the regular season and postseason.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">120 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Season Id <br>Season Name </td>
<td style="width:170px">Season Type </td>
<td style="width:170px">Season Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Information Data Points:</b></td>
<td>Abbreviated Name <br>Birth Date <br>Birth Place <br>College <br>College Conference <br>Draft Info Number <br>Draft Info Round <br>Draft Info Year <br>Draft Team Alias <br>Draft Team Id </td>
<td>Draft Team Market <br>Draft Team Name <br>Draft Team SR Id <br>Experience <br>First Name <br>Full Name <br>Height <br>High School <br>Id <br>Jersey Number </td>
<td>Last Name <br>Name Suffix <br>Position <br>Preferred Name <br>SR Id <br>Status <br>Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Seasonal Player Statistics Data Points:</b></td>
<td>Conversions Defense Attempts <br>Conversions Defense Successes <br>Conversions Pass Attempts <br>Conversions Pass Successes <br>Conversions Receiving Attempts <br>Conversions Receiving Successes <br>Conversions Rush Attempts <br>Conversions Rush Successes <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Missed <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards <br>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed <br>Field Goals Percent </td>
<td>Field Goals Yards <br>Fumbles End Zone Recovery Touchdowns <br>Fumbles Force Fumbles <br>Fumbles <br>Fumbles Lost <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Games Played <br>Games Started <br>Interception Returns Average Yards <br>Interception Returns Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Onside Attempts <br>Kickoffs Onside Successes <br>Kickoffs Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Squib Kicks <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Pocket Time <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing First Downs <br>Passing Gross Yards <br>Passing Hurries <br>Passing Interceptions <br>Passing Interception Touchdowns <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing On Target Throws <br>Passing Net Yards <br>Passing Pocket Time <br>Passing Poor Throws </td>
<td>Passing Rating <br>Passing Red Zone Attempts <br>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalties Yards <br>Punt Returns Average Yards <br>Punt Returns Fair Catches <br>Punt Returns Longest <br>Punt Returns Longest Touchdown <br>Punt Returns Returns <br>Punt Returns Touchdowns <br>Punt Returns Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catchable Passes <br>Receiving Dropped Passes <br>Receiving First Downs <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing First Downs <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackles for Loss <br>Rushing Tackles for Loss Yards <br>Rushing Touchdowns <br>Rushing Yards <br>Rushing Yards After Contact </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate a Player Profile for the Player ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/players/0acdcd3b-5442-4311-a139-ae7c506faf88/profile.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/players/0acdcd3b-5442-4311-a139-ae7c506faf88/profile.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/players/0acdcd3b-5442-4311-a139-ae7c506faf88/profile.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Player_Profile_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Player Profile feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/players/<code>{player_id}</code>/profile.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>player_id</code></td>
<td>ID for a given player.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Player Profile use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/profile-v7.0.xsd">https://feed.elasticstats.com/schema/football/profile-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="postgame-standings">Postgame Standings</h2>
<p>Provides standings information for each team, updated postgame.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">120 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Conference Alias <br>Conference Id <br>Conference Name <br>Division Alias </td>
<td style="width:170px">Division Id <br>Division Name <br>Season Id </td>
<td style="width:170px">Season Name <br>Season Type <br>Season Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Standings Information Data Points:</b></td>
<td>Category <br>Clinched <br>Conference Losses <br>Conference Points Against <br>Conference Points For <br>Conference Ties <br>Conference Winning Perc. <br>Conference Wins <br>Division Losses <br>Division Points Against <br>Division Points For <br>Division Rank <br>Division Ties <br>Division Winning Perc. <br>Division Wins <br>Home Losses <br>Home Points Against <br>Home Points For </td>
<td>Home Ties <br>Home Winning Perc. <br>Home Wins <br>Overall Losses <br>Overall Points Against <br>Overall Points For <br>Overall Ties <br>Overall Winning Perc. <br>Overall Wins <br>Road Losses <br>Road Points Against <br>Road Points For <br>Road Ties <br>Road Winning Perc. <br>Road Wins <br>Streak Description <br>Streak Length <br>Streak Type </td>
<td>Strength of Schedule <br>Strength of Schedule - Total <br>Strength of Schedule - Wins <br>Strength of Victory <br>Strength of Victory - Total <br>Strength of Victory - Wins <br>Vs AFC Losses <br>Vs AFC Points Against <br>Vs AFC Points For <br>Vs AFC Ties <br>Vs AFC Winning Perc. <br>Vs AFC Wins <br>Vs NFC Losses <br>Vs NFC Points Against <br>Vs NFC Points For <br>Vs NFC Ties <br>Vs NFC Winning Perc. <br>Vs NFC Wins </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Postgame Standings for the Season below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/standings/season.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/seasons/2021/REG/standings/season.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/standings/season.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Postgame_Standings_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Postgame Standings feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/seasons/<code>{year}</code>/<code>{nfl_season}</code>/standings/season.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Postgame Standings, replace the parameters in the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/nfl/premium/standings-v5.0.xsd">https://feed.elasticstats.com/schema/nfl/premium/standings-v5.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="prospects">Prospects</h2>
<p>Provides a list of upcoming or historical draft prospects for a given year.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">2 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Broadcast Channel <br>Broadcast Internet <br>Broadcast Network <br>Draft End Date </td>
<td style="width:170px">Draft Id <br>Draft Start Date <br>Draft Status <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name <br>Draft Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias <br>Conference Alias <br>Conference Id </td>
<td style="width:170px">Conference Name <br>Division Alias <br>Division Id </td>
<td style="width:170px">Division Name <br>Id <br>Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Prospect Birth Place <br>Prospect Experience <br>Prospect First Name <br>Prospect Height <br>Prospect Id </td>
<td style="width:170px">Prospect Last Name <br>Prospect League Id <br>Prospect Name <br>Prospect Position </td>
<td style="width:170px">Prospect Publishable <br>Prospect Source Id <br>Prospect Top Prospect <br>Prospect Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>City </td>
<td style="width:170px">Country <br>Name </td>
<td style="width:170px">State </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Prospects for the year below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/v1/en/2021/prospects.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/draft/nfl/trial/v1/en/2021/prospects.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/draft/nfl/trial/v1/en/2021/prospects.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Prospects_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Prospects feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/<code>{year}</code>/prospects.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the Draft API you are accessing (current version: v1). NOTE: All draft feeds are currently v1.</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Prospects use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/draft/prospects-v1.0.xsd">https://feed.elasticstats.com/schema/draft/prospects-v1.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="season-schedule">Season Schedule</h2>
<p>Provides complete schedule information for a given season, including venue and broadcast info, and scoring results by quarter.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">10 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Overtime Points <br>Away Team Points for Quarter <br>Away Team Total Points </td>
<td style="width:170px">Home Team Overtime Points <br>Home Team Points for Quarter <br>Home Team Total Points <br>Overtime Id <br>Overtime Number </td>
<td style="width:170px">Overtime Sequence <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Game Information Data Points:</b></td>
<td>Away Team Alias <br>Away Team Full Name <br>Away Team Game Number <br>Away Team Id <br>Away Team Name <br>Away Team SR Id <br>Broadcast Internet <br>Broadcast Network </td>
<td>Broadcast Satellite <br>Conference Game <br>Duration <br>Entry Mode <br>Home Team Alias <br>Home Team Full Name <br>Home Team Game Number <br>Home Team Id <br>Home Team Name <br>Home Team SR Id </td>
<td>Id <br>Number <br>Scheduled Start Date/Time <br>SR Id <br>Status <br>Weather - Condition <br>Weather - Humidity <br>Weather - Temperature <br>Wind Direction <br>Wind Speed </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Bye Week Team Alias <br>Bye Week Team Id <br>Bye Week Team Name <br>Bye Week Team SR Id </td>
<td>Season Id <br>Season Name <br>Season Type <br>Season Year </td>
<td>Week Id <br>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Schedule for the Season and Year below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/2021/reg/schedule.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/2021/reg/schedule.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/2021/reg/schedule.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Season_Schedule_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Season Schedule feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{year}</code>/<code>{nfl_season}</code>/schedule.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Schedule use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd">https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="seasonal-statistics">Seasonal Statistics</h2>
<p>Provides complete team and player seasonal statistics for a given season and season type.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">120 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Season Id <br>Season Name </td>
<td style="width:170px">Season Type </td>
<td style="width:170px">Season Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Information Data Points:</b></td>
<td>Full Name <br>Id </td>
<td>Jersey Number <br>Position </td>
<td>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Opponent Seasonal Statistics Data Points:</b></td>
<td>Conversions Defense Attempts <br>Conversions Defense Successes <br>Conversions Pass Attempts <br>Conversions Pass Successes <br>Conversions Rush Attempts <br>Conversions Rush Successes <br>Conversions Turnover Successes <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Efficiency 3rd Down Attempts <br>Efficiency 3rd Down Conversions <br>Efficiency 3rd Down Percentage <br>Efficiency 4th Down Attempts <br>Efficiency 4th Down Conversions <br>Efficiency 4th Down Percentage <br>Efficiency Goal to Go Attempts <br>Efficiency Goal to Go Conversions <br>Efficiency Goal to Go Percentage <br>Efficiency Red Zone Attempts <br>Efficiency Red Zone Conversions <br>Efficiency Red Zone Percentage <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards </td>
<td>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed <br>Field Goals Percent <br>Field Goals Yards <br>First Downs Passing <br>First Downs Penalty <br>First Downs Rushing <br>First Downs Total <br>Fumbles End Zone Recovery Touchdowns <br>Fumbles Force Fumbles <br>Fumbles <br>Fumbles Lost <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Games Played <br>Interception Returns Average Yards <br>Interception Returns Longest <br>Interception Returns Longest Touchdown <br>Interception Returns Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Interceptions <br>Interceptions Return Yards <br>Interceptions Returned <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns Longest <br>Kick Returns Longest Touchdown <br>Kick Returns Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Onside Attempts <br>Onside Successes <br>Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Returned <br>Kickoffs Squib Kicks <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Misc Returns - Block FG TDs <br>Misc Returns - Blocked Punt TDs <br>Misc Returns - End Zone Recovery TDs <br>Misc Returns - FG Return TDs <br>Misc Returns - Longest Touchdown <br>Misc Returns - Touchdowns <br>Misc Returns - Yards <br> Misc Returns <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing Gross Yards <br>Passing Hurries <br>Passing Interceptions <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing Net Yards </td>
<td>Passing On Target Throws <br>Passing Pocket Time <br>Passing Poor Throws <br>Passing Rating <br>Passing Red Zone Attempts <br>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalty Yards <br>Punt Returns Average Yards <br>Punt Returns Fair Catches <br>Punt Returns Longest <br>Punt Returns Longest Touchdown <br>Punt Returns <br>Punt Returns Touchdowns <br>Punt Returns Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catchable Passes <br>Receiving Dropped Passes <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackles for Loss <br>Rushing Tackles for Loss Yards <br>Rushing Touchdowns Rushing Yards After Contact <br>Rushing Yards <br>Touchdowns Fumble Return <br>Touchdowns Interception Return <br>Touchdowns Kick Return <br>Touchdowns Other <br>Touchdowns Pass <br>Touchdowns Punt Return <br>Touchdowns Rush <br>Touchdowns Total <br>Touchdowns Total Return </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Seasonal Player Statistics Data Points:</b></td>
<td>Conversions Defense Attempts <br>Conversions Defense Successes <br>Conversions Pass Attempts <br>Conversions Pass Successes <br>Conversions Receiving Attempts <br>Conversions Receiving Successes <br>Conversions Rush Attempts <br>Conversions Rush Successes <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Missed <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards <br>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed <br>Field Goals Percent </td>
<td>Field Goals Yards <br>Fumbles End Zone Recovery Touchdowns <br>Fumbles Force Fumbles <br>Fumbles <br>Fumbles Lost <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Games Played <br>Games Started <br>Interception Returns Average Yards <br>Interception Returns Longest <br>Interception Returns Longest Touchdown <br>Interception Returns Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns Longest <br>Kick Returns Longest Touchdown <br>Kick Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Onside Attempts <br>Kickoffs Onside Successes <br>Kickoffs Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Squib Kicks <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Pocket Time <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing First Downs <br>Passing Gross Yards <br>Passing Hurries <br>Passing Interception Touchdowns <br>Passing Interceptions <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing On Target Throws <br>Passing Net Yards <br>Passing Pocket Time <br>Passing Poor Throws </td>
<td>Passing Rating <br>Passing Red Zone Attempts <br>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalties Yards <br>Punt Returns Average Yards <br>Punt Returns Fair Catches <br>Punt Returns Longest <br>Punt Returns Longest Touchdown <br>Punt Returns Returns <br>Punt Returns Touchdowns <br>Punt Returns Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catchable Passes <br>Receiving Dropped Passes <br>Receiving First Downs <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing First Downs <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackles for Loss <br>Rushing Tackles for Loss Yards <br>Rushing Touchdowns <br>Rushing Yards <br>Rushing Yards After Contact </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Seasonal Team Statistics Data Points:</b></td>
<td>Conversions Defense Attempts <br>Conversions Defense Successes <br>Conversions Pass Attempts <br>Conversions Pass Successes <br>Conversions Rush Attempts <br>Conversions Rush Successes <br>Conversions Turnover Successes <br>Defense 4th Down Stops <br>Defense Assisted Tackles <br>Defense Batted Passes <br>Defense Blitzes <br>Defense Combined Tackles <br>Defense Combined Tackles <br>Defensive Completions <br>Defensive Targets <br>Defense Forced Fumbles <br>Defense Fumble Recoveries <br>Defense Hurries <br>Defense Interceptions <br>Defense Knockdowns <br>Defense Miscellaneous Assisted Tackles <br>Defense Miscellaneous Forced Fumbles <br>Defense Miscellaneous Fumble Recoveries <br>Defense Miscellaneous Tackles <br>Defense Missed Tackles <br>Defense Passes Defended <br>Defense QB Hits <br>Defense Sack Yards <br>Defense Sacks <br>Defense Safeties <br>Defense Special Teams Assisted Tackles <br>Defense Special Teams Blocks <br>Defense Special Teams Forced Fumbles <br>Defense Special Teams Fumble Recoveries <br>Defense Special Teams Tackles <br>Defense Tackles <br>Defense Tackles for Loss <br>Defense Tackles for Loss Yards <br>Defense Three and Outs Forced <br>Efficiency 3rd Down Attempts <br>Efficiency 3rd Down Conversions <br>Efficiency 3rd Down Percentage <br>Efficiency 4th Down Attempts <br>Efficiency 4th Down Conversions <br>Efficiency 4th Down Percentage <br>Efficiency Goal to Go Attempts <br>Efficiency Goal to Go Conversions <br>Efficiency Goal to Go Percentage <br>Efficiency Red Zone Attempts <br>Efficiency Red Zone Conversions <br>Efficiency Red Zone Percentage <br>Extra Points Kicking Attempts <br>Extra Points Kicking Blocked <br>Extra Points Kicking Made <br>Extra Points Kicking Percent <br>Field Goals Attempts <br>Field Goals Attempts 1-19 Yards <br>Field Goals Attempts 20-29 Yards <br>Field Goals Attempts 30-39 Yards <br>Field Goals Attempts 40-49 Yards <br>Field Goals Attempts 50+ Yards <br>Field Goals Average Yards <br>Field Goals Blocked <br>Field Goals Longest <br>Field Goals Made <br>Field Goals Made 1-19 Yards <br>Field Goals Made 20-29 Yards </td>
<td>Field Goals Made 30-39 Yards <br>Field Goals Made 40-49 Yards <br>Field Goals Made 50+ Yards <br>Field Goals Missed <br>Field Goals Percent <br>Field Goals Yards <br>First Downs Passing <br>First Downs Penalty <br>First Downs Rushing <br>First Downs Total <br>Fumbles End Zone Recovery Touchdowns <br>Fumbles Force Fumbles <br>Fumbles <br>Fumbles Lost Fumbles <br>Fumbles Opponent Recovery <br>Fumbles Opponent Recovery Touchdowns <br>Fumbles Opponent Recovery Yards <br>Fumbles Out of Bounds <br>Fumbles Own Recovery <br>Fumbles Own Recovery Touchdowns <br>Fumbles Own Recovery Yards <br>Team Games Played <br>Interception Returns Average Yards <br>Interception Returns Longest <br>Interception Returns Longest Touchdown <br>Interception Returns <br>Interception Returns Touchdowns <br>Interception Returns Yards <br>Interceptions <br>Interceptions Return Yards <br>Interceptions Returned <br>Kick Returns Average Yards <br>Kick Returns Fair Catches <br>Kick Returns Longest <br>Kick Returns Longest Touchdown <br>Kick Returns <br>Kick Returns Touchdowns <br>Kick Returns Yards <br>Kickoffs End Zone <br>Kickoffs Inside 20 <br>Kickoffs <br>Kickoffs Onside Attempts <br>Kickoffs Onside Successes <br>Kickoffs Out of Bounds <br>Kickoffs Return Yards <br>Kickoffs Returned <br>Kickoffs Squib Kicks <br>Kickoffs Touchbacks <br>Kickoffs Yards <br>Passing Air Yards <br>Passing Attempts <br>Passing Average Yards <br>Passing Batted Passes <br>Passing Blitzes <br>Passing Completion Percentage <br>Passing Completions <br>Passing Defended Passes <br>Passing Dropped Passes <br>Passing Gross Yards <br>Passing Hurries <br>Passing Interception Touchdowns <br>Passing Interceptions <br>Passing Knockdowns <br>Passing Longest <br>Passing Longest Touchdown <br>Passing Net Yards <br>Passing On Target Throws </td>
<td>Passing Pocket Time <br>Passing Poor Throws <br>Passing Rating <br>Passing Red Zone Attempts <br>Passing Sack Yards <br>Passing Sacks <br>Passing Spikes <br>Passing Throw Aways <br>Passing Touchdowns <br>Passing Yards <br>Penalties <br>Penalty Yards <br>Punt Returns Average Yards <br>Punt Returns Fair Catches <br>Punt Returns Longest <br>Punt Returns Longest Touchdown <br>Punt Returns <br>Punt Returns Touchdowns <br>Punt Returns Yards <br>Punts Attempts <br>Punts Average Hang Time <br>Punts Average Net Yards <br>Punts Average Yards <br>Punts Blocked <br>Punts Hang Time <br>Punts Inside 20 <br>Punts Longest <br>Punts Net Yards <br>Punts Return Yards <br>Punts Touchbacks <br>Punts Yards <br>Receiving Air Yards <br>Receiving Average Yards <br>Receiving Broken Tackles <br>Receiving Catchable Passes <br>Receiving Dropped Passes <br>Receiving Longest <br>Receiving Longest Touchdown <br>Receiving Receptions <br>Receiving Red Zone Targets <br>Receiving Targets <br>Receiving Touchdowns <br>Receiving Yards <br>Receiving Yards After Catch <br>Receiving Yards After Contact <br>Rushing Attempts <br>Rushing Average Yards <br>Rushing Broken Tackles <br>Rushing Kneel Downs <br>Rushing Longest <br>Rushing Longest Touchdown <br>Rushing Red Zone Attempts <br>Rushing Scrambles <br>Rushing Tackles for Loss <br>Rushing Tackles for Loss Yards <br>Rushing Touchdowns <br>Rushing Yards After Contact <br>Rushing Yards <br>Touchdowns Fumble Return <br>Touchdowns Interception Return <br>Touchdowns Kick Return <br>Touchdowns Other <br>Touchdowns Pass <br>Touchdowns Punt Return <br>Touchdowns Rush <br>Touchdowns Total <br>Touchdowns Total Return </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Seasonal Statistics for the Season, Year, and Game ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/statistics.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/seasons/2021/REG/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/statistics.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/statistics.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Seasonal_Statistics_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Seasonal Statistics feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/seasons/<code>{year}</code>/<code>{nfl_season}</code>/teams/<code>{team_id}</code>/statistics.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>team_id</code></td>
<td>ID of a given team.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Seasonal Statistics use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/statistics-v7.0.xsd">https://feed.elasticstats.com/schema/football/statistics-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="seasons">Seasons</h2>
<p>Provides a list of all available seasons, including preseasons and postseasons.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id <br>Name <br>Season End Date </td>
<td style="width:170px">Season Id <br>Season Start Date <br>Season Status </td>
<td style="width:170px">Season Type <br>Season Type Code <br>Season Year </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the list of Seasons replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/league/seasons.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/league/seasons.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/league/seasons.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Seasons_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Seasons feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/league/seasons.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Seasons use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/seasons-v7.0.xsd">https://feed.elasticstats.com/schema/football/seasons-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="team-draft-summary">Team Draft Summary</h2>
<p>Provides pre-draft pick order with live pick selections during the draft for a given team.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">2 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Broadcast Channel <br>Broadcast Internet <br>Broadcast Network <br>Draft End Date <br>Draft Id <br>Draft Start Date <br>Draft Status <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name <br>Draft Year <br>Pick Compensatory <br>Pick Id <br>Pick Number <br>Pick Overall </td>
<td style="width:170px">Pick Traded <br>Round End Date <br>Round Id <br>Round Number <br>Round Start Date <br>Round Status <br>Trade Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Prospect Birth Place <br>Prospect Experience <br>Prospect First Name <br>Prospect Height <br>Prospect Id </td>
<td style="width:170px">Prospect Last Name <br>Prospect League Id <br>Prospect Name <br>Prospect Position </td>
<td style="width:170px">Prospect Publishable <br>Prospect Source Id <br>Prospect Team Name <br>Prospect Top Prospect <br>Prospect Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>City </td>
<td style="width:170px">Country <br>Name </td>
<td style="width:170px">State </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate a Team Draft Summary for the Team ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/v1/en/2021/teams/d5a2eb42-8065-4174-ab79-0a6fa820e35e/draft.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/draft/nfl/trial/v1/en/2021/teams/d5a2eb42-8065-4174-ab79-0a6fa820e35e/draft.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/draft/nfl/trial/v1/en/2021/teams/d5a2eb42-8065-4174-ab79-0a6fa820e35e/draft.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Team_Draft_Summary_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Team Draft Summary feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/<code>{year}</code>/teams/<code>{team_id}</code>/draft.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the Draft API you are accessing (current version: v1). NOTE: All draft feeds are currently v1.</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>team_id</code></td>
<td>ID of a given team.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Team Draft Summary use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/draft/summary-v1.0.xsd">https://feed.elasticstats.com/schema/draft/summary-v1.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="team-profile">Team Profile</h2>
<p>Provides franchise team information, as well as a roster of active players.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Franchise Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Conference Alias <br>Conference Id </td>
<td>Conference Name <br>Division Alias </td>
<td>Division Id <br>Division Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Information Data Points:</b></td>
<td>Abbreviated Name <br>Birth Date <br>Birth Place <br>College <br>College Conference <br>Draft Info Number <br>Draft Info Round <br>Draft Info Year <br>Draft Team Alias <br>Draft Team Id </td>
<td>Draft Team Market <br>Draft Team Name <br>Draft Team SR Id <br>Experience <br>First Name <br>Full Name <br>Height <br>High School <br>Id <br>Jersey Number </td>
<td>Last Name <br>Name Suffix <br>Position <br>Preferred Name <br>SR Id <br>Status <br>Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Championship Seasons <br>Championships Won <br>Coach First Name  <br>Coach Full Name <br>Coach Id <br>Coach Last Name <br>Coach Name Suffix <br>Coach Position <br>Conference Titles </td>
<td style="width:170px">Division Titles <br>Fight Song <br>General Manager <br>Id <br>Market <br>Mascot <br>Name <br>Nicknames <br>Owner </td>
<td style="width:170px">Playoff Appearances <br>President <br>SR Id <br>Team Color - Alpha <br>Team Color - RGB Blue <br>Team Color - RGB Green <br>Team Color - RGB Red <br>Team Color - Type <br>Year Founded </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate a team profile for the Team ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/profile.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/profile.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/profile.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Team_Profile_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Team Profile feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/teams/<code>{team_id}</code>/profile.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>team_id</code></td>
<td>ID of a given team.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Team Profile use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/team-v7.0.xsd">https://feed.elasticstats.com/schema/football/team-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="team-roster">Team Roster</h2>
<p>Provides franchise team information, as well as the complete roster of players.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">300 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Franchise Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Conference Alias <br>Conference Id </td>
<td>Conference Name <br>Division Alias </td>
<td>Division Id <br>Division Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Information Data Points:</b></td>
<td>Abbreviated Name <br>Birth Date <br>Birth Place <br>College <br>College Conference <br>Draft Info Number <br>Draft Info Round <br>Draft Info Year <br>Draft Team Alias <br>Draft Team Id </td>
<td>Draft Team Market <br>Draft Team Name <br>Draft Team SR Id <br>Experience <br>First Name <br>Full Name <br>Height <br>High School <br>Id <br>Jersey Number </td>
<td>Last Name <br>Name Suffix <br>Position <br>Preferred Name <br>SR Id <br>Status <br>Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Coach First Name  <br>Coach Full Name <br>Coach Id </td>
<td style="width:170px">Coach Last Name <br>Coach Name Suffix <br>Coach Position <br>Id </td>
<td style="width:170px">Market <br>Name <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate a Team Roster for the Team ID below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/full_roster.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/full_roster.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/teams/0d855753-ea21-4953-89f9-0e20aff9eb73/full_roster.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Team_Roster_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Team Roster feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/teams/<code>{team_id}</code>/full_roster.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>team_id</code></td>
<td>ID of a given team.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Team Roster use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/team-v7.0.xsd">https://feed.elasticstats.com/schema/football/team-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="top-prospects">Top Prospects</h2>
<p>Provides a list of the top prospects for a given year.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">2 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Broadcast Channel <br>Broadcast Internet <br>Broadcast Network <br>Draft End Date </td>
<td style="width:170px">Draft Id <br>Draft Start Date <br>Draft Status <br>Draft Team Alias </td>
<td style="width:170px">Draft Team Id <br>Draft Team Market <br>Draft Team Name <br>Draft Year </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias <br>Conference Alias <br>Conference Id </td>
<td style="width:170px">Conference Name <br>Division Alias <br>Division Id </td>
<td style="width:170px">Division Name <br>Id <br>Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">Prospect Birth Place <br>Prospect Experience <br>Prospect First Name <br>Prospect Height <br>Prospect Id </td>
<td style="width:170px">Prospect Last Name <br>Prospect League Id <br>Prospect Name <br>Prospect Position </td>
<td style="width:170px">Prospect Publishable <br>Prospect Source Id <br>Prospect Team Name <br>Prospect Top Prospect <br>Prospect Weight </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>City </td>
<td style="width:170px">Country <br>Name </td>
<td style="width:170px">State </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Top Prospects for the year below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/v1/en/2021/top_prospects.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/draft/nfl/trial/v1/en/2019/top_prospects.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/draft/nfl/trial/v1/en/2021/top_prospects.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Top_Prospects_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Top Prospects feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/<code>{year}</code>/top_prospects.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the Draft API you are accessing (current version: v1). NOTE: All draft feeds are currently v1.</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Top Prospects use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/draft/prospects-v1.0.xsd">https://feed.elasticstats.com/schema/draft/prospects-v1.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="trades">Trades</h2>
<p>Provides summary details of all in-draft trades.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">2 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Draft Information Data Points:</b></td>
<td style="width:170px">Broadcast Channel <br>Broadcast Internet <br>Broadcast Network <br>Draft End Date <br>Draft Id <br>Draft Start Date <br>Draft Status <br>Draft Team Alias <br>Draft Team Id <br>Draft Team Market </td>
<td style="width:170px">Draft Team Name <br>Draft Year <br>Future Pick Round <br>Future Pick Year <br>Item Amount <br>Item Id <br>Item Type <br>Pick Compensatory <br>Pick Id <br>Pick Number <br>Pick Overall </td>
<td style="width:170px">Pick Supplemental <br>Round End Date <br>Round Id <br>Round Number <br>Round Start Date <br>Trade Complete <br>Trade Id <br>Trade Sequence <br>Transaction Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>League Information Data Points:</b></td>
<td style="width:170px">Alias </td>
<td style="width:170px">Id </td>
<td style="width:170px">Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Player Information Data Points:</b></td>
<td style="width:170px">First Name <br>Id </td>
<td style="width:170px">Last Name <br>Position </td>
<td style="width:170px">Source Id <br>SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Coach First Name <br>Coach Id </td>
<td style="width:170px">Coach Last Name <br>Coach Source Id <br>Team Direction </td>
<td style="width:170px">Id <br>Market <br>Name </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Venue Information Data Points:</b></td>
<td style="width:170px">Address <br>City </td>
<td style="width:170px">Country <br>Name </td>
<td style="width:170px">State </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Trades for the year below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/v1/en/2021/trades.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/draft/nfl/trial/v1/en/2021/trades.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/draft/nfl/trial/v1/en/2021/trades.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Trades_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Trades feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/<code>{year}</code>/trades.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the Draft API you are accessing (current version: v1). NOTE: All draft feeds are currently v1.</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for Trades use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/draft/trades-v1.0.xsd">https://feed.elasticstats.com/schema/draft/trades-v1.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="weekly-depth-charts">Weekly Depth Charts</h2>
<p>Provides depth chart information for each team for a given week.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">120 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">Updated shortly before the game, but may be updated during or post game.</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Depth Chart Data Points:</b></td>
<td>Position Name </td>
<td colspan="2">Depth </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Season Id <br>Season Name <br>Season Type </td>
<td>Season Year <br>Week Id </td>
<td>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Data Points:</b></td>
<td style="width:170px">Full Name <br>Id </td>
<td style="width:170px">Jersey Number <br>Position </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Weekly Depth Charts enter the Year, Season, Week below, and replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/01/depth_charts.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/seasons/2021/REG/01/depth_charts.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/01/depth_charts.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Weekly_Depth_Charts_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Weekly Depth Charts feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/seasons/<code>{year}</code>/<code>{nfl_season}</code>/<code>{nfl_season_week}</code>/depth_charts.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>nfl_season_week</code></td>
<td>The number of weeks into the season in 2 digit format (WW).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Weekly Depth Charts use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/depth_charts-v7.0.xsd">https://feed.elasticstats.com/schema/football/depth_charts-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="weekly-injuries">Weekly Injuries</h2>
<p>Provides a list of injured players for each team for a given week, including practice status.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">120 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Injury Data Points:</b></td>
<td style="width:170px">Status <br>Status Date </td>
<td style="width:170px">Practice Status </td>
<td style="width:170px">Description </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Season Id <br>Season Name <br>Season Type </td>
<td>Season Year <br>Week Id </td>
<td>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Player Data Points:</b></td>
<td style="width:170px">Full Name <br>Id </td>
<td style="width:170px">Jersey Number <br>Position </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
<tbody>
<tr>
<td class="heading"><b>Team Information Data Points:</b></td>
<td style="width:170px">Alias <br>Id </td>
<td style="width:170px">Market <br>Name </td>
<td style="width:170px">SR Id </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Weekly Injuries enter the Year, Season, Week below, and replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/01/injuries.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/seasons/2021/REG/01/injuries.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/seasons/2021/REG/01/injuries.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Weekly_Injuries_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Weekly Injuries feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/seasons/<code>{year}</code>/<code>{nfl_season}</code>/<code>{nfl_season_week}</code>/injuries.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>nfl_season_week</code></td>
<td>The number of weeks into the season in 2 digit format (WW).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Weekly Injuries use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/injuries-v7.0.xsd">https://feed.elasticstats.com/schema/football/injuries-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<h2 id="weekly-schedule">Weekly Schedule</h2>
<p>Provides complete schedule information for a given week of the season, including venue, weather conditions, broadcast info, and scoring results by quarter.</p>
<table class="basetable version">
<thead>
<tr>
<td style="width:130px" class="heading"><b>TTL / Cache:</b></td>
<td colspan="3">10 seconds</td>
</tr>
</thead>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Update Frequency:</b></td>
<td colspan="3">As Necessary</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Content Type:</b></td>
<td colspan="3">Raw XML or JSON</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Boxscore Information Data Points:</b></td>
<td style="width:170px">Attendance <br>Away Team Overtime Points <br>Away Team Points for Quarter <br>Away Team Total Points </td>
<td style="width:170px">Home Team Overtime Points <br>Home Team Points for Quarter <br>Home Team Total Points <br>Overtime Id <br>Overtime Number </td>
<td style="width:170px">Overtime Sequence <br>Quarter Id <br>Quarter Number <br>Quarter Sequence </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Game Information Data Points:</b></td>
<td>Away Team Alias <br>Away Team Full Name <br>Away Team Game Number <br>Away Team Id <br>Away Team Name <br>Away Team SR Id <br>Broadcast Internet <br>Broadcast Network </td>
<td>Broadcast Satellite <br>Conference Game <br>Duration <br>Entry Mode <br>Home Team Alias <br>Home Team Full Name <br>Home Team Game Number <br>Home Team Id <br>Home Team Name <br>Home Team SR Id </td>
<td>Id <br>Number <br>Scheduled Start Date/Time <br>SR Id <br>Status </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>League Information Data Points:</b></td>
<td>Bye Week Team Alias <br>Bye Week Team Id <br>Bye Week Team Name <br>Bye Week Team SR Id </td>
<td>Season Id <br>Season Name <br>Season Type <br>Season Year </td>
<td>Week Id <br>Week Sequence <br>Week Title </td>
</tr>
</tbody>
<tbody>
<tr>
<td style="width:130px" class="heading"><b>Venue Data Points:</b></td>
<td style="width:170px">Address <br>Capacity <br>City <br>Country <br>Id </td>
<td style="width:170px">Latitude <br>Longitude <br>Name <br>Roof Type </td>
<td style="width:170px">SR Id <br>State <br>Surface <br>Zip </td>
</tr>
</tbody>
</table>
<blockquote>
  <p>To generate the Weekly Schedule for the Year, Season, and Week below replace {your_api_key} with your API key:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/v7/en/games/2021/REG/01/schedule.xml?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import http.client

conn = http.client.HTTPSConnection("api.sportradar.us")

conn.request("GET", "/nfl/official/trial/v7/en/games/2021/REG/01/schedule.xml?api_key={your_api_key}")

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))</code></pre>
<pre><code class="shell language-shell">curl -X GET "https://api.sportradar.us/nfl/official/trial/v7/en/games/2021/REG/01/schedule.xml?api_key={your_api_key}"</code></pre>
<blockquote>
  <p>The above command returns xml structured like <a onclick="window.open('/files/NFL_Weekly_Schedule_Sample_v7.xml','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Access the Weekly Schedule feed by replacing the parameters in the following URL:</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/<code>{version}</code>/<code>{language_code}</code>/games/<code>{year}</code>/<code>{nfl_season}</code>/<code>{nfl_season_week}</code>/schedule.<code>{format}</code>?api_key=<code>{your_api_key}</code></p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>version</code></td>
<td>Version number of the API you are accessing (current version: v7).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>2 letter code for supported languages: en (English), de (German), fr (French), it (Italian), es (Spanish), ja (Japanese), nl (Dutch), da (Danish), se (Swedish), no (Norwegian), fi (Finnish), or tr (Turkish).</td>
</tr>
<tr>
<td><code>year</code></td>
<td>Year in 4 digit format (YYYY).</td>
</tr>
<tr>
<td><code>nfl_season</code></td>
<td>Preseason (PRE), Regular Season (REG), or Post-Season (PST).</td>
</tr>
<tr>
<td><code>nfl_season_week</code></td>
<td>The number of weeks into the season in 2 digit format (WW).</td>
</tr>
<tr>
<td><code>format</code></td>
<td>xml or json.</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<p>To retrieve the XML Schema Definition (.XSD) for the Weekly Schedule use the following URL.</p>
<p><a href="https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd">https://feed.elasticstats.com/schema/football/schedule-v7.0.xsd</a></p>
<p><a href="#top">Return to top</a></p>
<p><a id="Push"></a></p>
<h2 id="push-feeds">Push Feeds</h2>
<blockquote>
  <p>To best utilize Push feeds, we have included code samples in Ruby, Java and Python which provide an example of a way you can consume the feeds. Using these samples will output the feeds content to STDOUT. <br>For Java, we have also provided a <a href="https://developer.sportradar.com/files/stream-client.zip">Stream Client</a> to assist your integration. <br><br>Note: In the provided Java sample, replace "URL GOES HERE" with the desired Push feed URL.</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'httpclient'

module Sportradar
    module HTTP
        module Stream
            class Client
                attr_reader :url, :logger

                def initialize(url, publisher, logger)
                    @url = url
                    @logger = logger
                    @publisher = publisher
                    @client = ::HTTPClient.new(:agent_name =&gt; 'SportsData/1.0')
                end

                def start
                    @thread ||= Thread.new do
                        logger.debug "Starting loop"
                        @client.get_content(url, :follow_redirect =&gt; true) do |chunk|
                            @publisher.publish(::JSON.parse(chunk)) if @publisher
                        end
                        logger.debug "finished loop"
                    end
                end

                def stop
                    @thread.terminate if @thread
                end

            end
        end
    end
end</code></pre>
<pre><code class="java language-java">package com.sportradar.http.stream.client;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class StreamClientTest {

    private StreamClient client;

    private static String SERVICE_URL = "&lt;url goes="" here=""&gt;";

    @Before
    public void setup() {
        client = new StreamClient();
    }

    @After
    public void cleanup() {
        client.terminate();
    }

    @Test
    public void testStream() throws Exception {
        Handler handler = new ConsoleHandler();
        client.stream(SERVICE_URL, handler);
        System.out.println("Connecting....");
        Thread.sleep(1 * 60 * 1000);
        System.out.println("Disconnecting....");
    }

}</code></pre>
<p>Some of our APIs include Push feeds that allow you to get updates as soon as they are available. Push API feeds automatically send JSON payload to you via a push service, and can dramatically reduce the number of calls you need to make to our RESTful API feeds. The structure of the Push feeds are similar to the structure of the corresponding RESTful API feed (i.e. Push Events, and Push Statistics). The push service ensures reliable and efficient delivery of the most up to date information.</p>
<p>Our Push services are based on a HTTP publish/subscribe model. When making a call to the Push APIs, you "subscribe" to various data feeds provided by our service; whenever new content is available on one of those feeds, the server pushes that information out to your client. When no new information is available on the feed, a heartbeat message is sent every 5 seconds to keep the connection active. If you want to filter the results of the feeds, there are several optional query string parameters that can be applied to the API call. If left unfiltered, all data for the feed is displayed (i.e. all games, events, or statistics).</p>
<p>For your applications to accept data from our Push feeds, ensure that your application can:</p>
<ul>
<li>Can follow a HTTP redirect or use the location provided in the feeds header within one minute of your initial request.</li>
<li>Can accept HTTP data transfer encoded as chunked.</li>
</ul>
<p>Our Push service does not provide a "stateful session", there is no memory of what data has been sent previously. If you are disconnected from the Push session, you can use the RESTful API to catch up or recover from the disconnection.</p>
<p>Syntax for using our Push feeds and examples of the JSON payloads can be found below.</p>
<h2 id="push-draft-picks">Push Draft Picks</h2>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/stream/en/picks/subscribe?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/draft/nfl/trial/stream/en/picks/subscribe",
    params = {'api_key': 'your_api_key'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/draft/nfl/trial/stream/en/picks/subscribe?api_key={your_api_key}'</code></pre>
<blockquote>
  <p>The above command returns json like <a onclick="window.open('/files/NFL_Push_Draft_Picks_Sample_v1.json','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Provides pre-draft pick order with real-time (push enabled) pick selections during the draft.</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/stream/en/picks/subscribe?api_key=<code>{your_api_key}</code></p>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<h3 id="optional-query-string-parameters">Optional Query String Parameters</h3>
<blockquote>
  <p>Example including optional query string parameters:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/stream/en/picks/subscribe?api_key={your_api_key}&amp;amp;draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9&amp;amp;league=NFL")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/draft/nfl/trial/stream/en/picks/subscribe",
    params = {'api_key': 'your_api_key', 'draft': 'sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9', 'league': 'NFL'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/draft/nfl/trial/stream/en/picks/subscribe?api_key={your_api_key}&amp;amp;draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9&amp;amp;league=NFL'</code></pre>
<p>In addition to the URL parameters listed above, you can filter the Pick information with one or more of the following optional query string parameters.</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Optional query string parameters must be added after your API key with an ampersand (&amp;). If you are filtering for more than one result, separate the results with a comma (,) and no spaces.
</td>
</tr></thead><tbody>
</tbody></table>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>draft</code></td>
<td>Draft id expressed as: sd:draft:{draft_id}. <br>Example: draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9</td>
</tr>
</tbody>
</table>
<p><a href="#top">Return to top</a></p>
<h2 id="push-draft-trades">Push Draft Trades</h2>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/stream/en/trades/subscribe?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/draft/nfl/trial/stream/en/trades/subscribe",
    params = {'api_key': 'your_api_key'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/draft/nfl/trial/stream/en/trades/subscribe?api_key={your_api_key}'</code></pre>
<blockquote>
  <p>The above command returns json like <a onclick="window.open('/files/NFL_Push_Draft_Trades_Sample_v1.json','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
</blockquote>
<p>Provides summary details of all in-draft trades in real-time.</p>
<p>https://api.sportradar.us/draft/nfl/<code>{access_level}</code>/stream/en/trades/subscribe?api_key=<code>{your_api_key}</code></p>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<h3 id="optional-query-string-parameters-1">Optional Query String Parameters</h3>
<blockquote>
  <p>Example including optional query string parameters:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/draft/nfl/trial/stream/en/trades/subscribe?api_key={your_api_key}&amp;amp;draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9&amp;amp;league=NFL")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/draft/nfl/trial/stream/en/trades/subscribe",
    params = {'api_key': 'your_api_key', 'draft': 'sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9', 'league': 'NFL'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/draft/nfl/trial/stream/en/trades/subscribe?api_key={your_api_key}&amp;amp;draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9&amp;amp;league=NFL'</code></pre>
<p>In addition to the URL parameters listed above, you can filter the Trades information with one or more of the following optional query string parameters.</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Optional query string parameters must be added after your API key with an ampersand (&amp;). If you are filtering for more than one result, separate the results with a comma (,) and no spaces.
</td>
</tr></thead><tbody>
</tbody></table>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>draft</code></td>
<td>Draft id expressed as: sd:draft:{draft_id}. <br>Example: draft=sd:draft:04b11293-240e-4340-8f4f-ded6c6281fe9</td>
</tr>
</tbody>
</table>
<p><a href="#top">Return to top</a></p>
<h2 id="push-events">Push Events</h2>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/events/subscribe?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/events/subscribe",
    params = {'api_key': 'your_api_key'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/events/subscribe?api_key={your_api_key}'</code></pre>
<blockquote>
  <p>The above command returns json like <a onclick="window.open('/files/NFL_v7_Push_Events_Example.json','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
  <p>Click <a onclick="window.open('/files/MIA_CIN_092922_Sample_Push_Data.zip','','scrollbars=yes,resizable=yes');return false;">here</a> for Push samples (Events, Pulse, Statistics) of a complete game.</p>
</blockquote>
<p>Provides detailed, real-time information on every live game event.</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/stream/<code>{language_code}</code>/events/subscribe?api_key=<code>{your_api_key}</code></p>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>Optional code for supported languages: en (English) or translations (Any other language translations. See optional query string parameters for locale.)</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<h3 id="optional-query-string-parameters-2">Optional Query String Parameters</h3>
<blockquote>
  <p>Example including optional query string parameters:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/events/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:673b459c-7506-4c11-9273-1b9502537f1d")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/events/subscribe",
    params = {'api_key': 'your_api_key', 'status': 'inprogress', 'match': 'sd:match:673b459c-7506-4c11-9273-1b9502537f1d'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/events/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:673b459c-7506-4c11-9273-1b9502537f1d'</code></pre>
<p>In addition to the URL parameters listed above, you can filter the Events information with one or more of the following optional query string parameters.</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Optional query string parameters must be added after your API key with an ampersand (&amp;). If you are filtering for more than one result, separate the results with a comma (,) and no spaces.
</td>
</tr></thead><tbody>
</tbody></table>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>event_category</code></td>
<td>Event category expressed as: {event_category}. <br>Example: event_category=redzone <br>Valid event categories: redzone, two_minute, scoring_play, big_play, turnover</td>
</tr>
<tr>
<td><code>event_type</code></td>
<td>Event type expressed as: {event_type}. <br>Example: event_type=timeout <br>Valid event types: setup, timeout, tv_timeout, two_minute_warning, comment, period_end, game_over</td>
</tr>
<tr>
<td><code>locale</code></td>
<td>Locale expressed as 2 letter code: locale={language_code} <br>Example: locale=en</td>
</tr>
<tr>
<td><code>match</code></td>
<td>Match id expressed as: sd:match:{match_id}. <br>Example: match_id=sd:match:673b459c-7506-4c11-9273-1b9502537f1d</td>
</tr>
<tr>
<td><code>status</code></td>
<td>Status type expressed as: inprogress or created. <br>Example: status=inprogress</td>
</tr>
<tr>
<td><code>team</code></td>
<td>Team id expressed as: sd:team:{team_id}. <br>Example: team_id=sd:team:4415b0a7-0f24-11e2-8525-18a905767e44</td>
</tr>
</tbody>
</table>
<p><a href="#top">Return to top</a></p>
<h2 id="push-pulse">Push Pulse</h2>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/pulse/subscribe?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/pulse/subscribe",
    params = {'api_key': 'your_api_key'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/pulse/subscribe?api_key={your_api_key}'</code></pre>
<blockquote>
  <p>The above command returns json like <a onclick="window.open('/files/NFL_v7_Push_Pulse_Example.json','','scrollbars=yes,resizable=yes');return false;">this</a>. </p>
  <p>Click <a onclick="window.open('/files/MIA_CIN_092922_Sample_Push_Data.zip','','scrollbars=yes,resizable=yes');return false;">here</a> for Push samples (Events, Pulse, Statistics) of a complete game.</p>
</blockquote>
<p>Provides real-time messages about on-field activity before, during, and after a play.<br><br>Messages will include: players approaching the line of scrimmage, ball snap (play start), end of play, game clock status (start and stop), play event outcome, and updated game state info (possession, down, distance, and location).</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Our NFL Push Pulse feed is available exclusively for Realtime plans with Pulse enabled. Reach out to our sales team for more information.
</td>
</tr></thead><tbody>
</tbody></table>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/stream/<code>{language_code}</code>/pulse/subscribe?api_key=<code>{your_api_key}</code></p>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>Optional code for supported languages: en (English) or translations (Any other language translations. See optional query string parameters for locale.)</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<h3 id="optional-query-string-parameters-3">Optional Query String Parameters</h3>
<blockquote>
  <p>Example including optional query string parameters:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/pulse/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:489b0cb2-117a-4118-98cc-1992ffbb056e")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/pulse/subscribe",
    params = {'api_key': 'your_api_key', 'status': 'inprogress', 'match': 'sd:match:489b0cb2-117a-4118-98cc-1992ffbb056e'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/pulse/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:489b0cb2-117a-4118-98cc-1992ffbb056e'</code></pre>
<p>In addition to the URL parameters listed above, you can filter the Pulse information with one or more of the following optional query string parameters.</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Optional query string parameters must be added after your API key with an ampersand (&amp;). If you are filtering for more than one result, separate the results with a comma (,) and no spaces.
</td>
</tr></thead><tbody>
</tbody></table>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>event_category</code></td>
<td>Event category expressed as: {event_category}. <br>Example: event_category=redzone <br>Valid event categories: redzone, two_minute, scoring_play, big_play, turnover</td>
</tr>
<tr>
<td><code>event_type</code></td>
<td>Event type expressed as: {event_type}. <br>Example: event_type=pass</td>
</tr>
<tr>
<td><code>locale</code></td>
<td>Locale expressed as 2 letter code: locale={language_code} <br>Example: locale=en</td>
</tr>
<tr>
<td><code>match</code></td>
<td>Match id expressed as: sd:match:{match_id}. <br>Example: sd:match:489b0cb2-117a-4118-98cc-1992ffbb056e</td>
</tr>
<tr>
<td><code>status</code></td>
<td>Status type expressed as: inprogress or created. <br>Example: status=inprogress</td>
</tr>
<tr>
<td><code>team</code></td>
<td>Team id expressed as: sd:team:{team_id}. <br>Example: team_id=sd:team:4415b0a7-0f24-11e2-8525-18a905767e44</td>
</tr>
</tbody>
</table>
<p><a href="#top">Return to top</a></p>
<h2 id="push-statistics">Push Statistics</h2>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/statistics/subscribe?api_key={your_api_key}")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/statistics/subscribe",
    params = {'api_key': 'your_api_key'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/statistics/subscribe?api_key={your_api_key}'</code></pre>
<blockquote>
  <p>The above command returns json like <a onclick="window.open('/files/NFL_v7_Push_Statistics_Example.json','','scrollbars=yes,resizable=yes');return false;">this</a>.</p>
  <p>Click <a onclick="window.open('/files/MIA_CIN_092922_Sample_Push_Data.zip','','scrollbars=yes,resizable=yes');return false;">here</a> for Push samples (Events, Pulse, Statistics) of a complete game.</p>
</blockquote>
<p>Provides detailed, real-time game stats at the team and player level for all live games.</p>
<p>https://api.sportradar.us/nfl/official/<code>{access_level}</code>/stream/<code>{language_code}</code>/statistics/subscribe?api_key=<code>{your_api_key}</code></p>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>access_level</code></td>
<td>Defines the access level of your API key as Production (production), or Trial (trial).</td>
</tr>
<tr>
<td><code>language_code</code></td>
<td>Optional code for supported languages: en (English) or translations (Any other language translations. See optional query string parameters for locale.)</td>
</tr>
<tr>
<td><code>your_api_key</code></td>
<td>Your API key.</td>
</tr>
</tbody>
</table>
<h3 id="optional-query-string-parameters-4">Optional Query String Parameters</h3>
<blockquote>
  <p>Example including optional query string parameters:</p>
</blockquote>
<pre><code class="ruby language-ruby">require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.sportradar.us/nfl/official/trial/stream/en/statistics/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:673b459c-7506-4c11-9273-1b9502537f1d")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body</code></pre>
<pre><code class="python language-python">import requests
import json

r = requests.get("https://api.sportradar.com/nfl/official/trial/stream/en/statistics/subscribe",
    params = {'api_key': 'your_api_key', 'status': 'inprogress', 'match': 'sd:match:673b459c-7506-4c11-9273-1b9502537f1d'},
    allow_redirects=False)

redirect_url = r.headers['Location']
r = requests.get(redirect_url, stream=True)

for line in r.iter_lines():
    # filter out keep-alive new lines
    if line:
        decoded_line = line.decode('utf-8')
        print(json.loads(decoded_line))</code></pre>
<pre><code class="shell language-shell">curl -L GET 'api.sportradar.us/nfl/official/trial/stream/en/statistics/subscribe?api_key={your_api_key}&amp;amp;status=inprogress&amp;amp;match=sd:match:673b459c-7506-4c11-9273-1b9502537f1d'</code></pre>
<p>In addition to the URL parameters listed above, you can filter the Statistics information with one or more of the following optional query string parameters.</p>
<table>
<thead><tr>
<td style="padding:20px;background-color:#00003c;color:white;width:57%;text-align:left;cursor:default;">
<b>Note</b>: Optional query string parameters must be added after your API key with an ampersand (&amp;). If you are filtering for more than one result, separate the results with a comma (,) and no spaces.
</td>
</tr></thead><tbody>
</tbody></table>
<p>Replace placeholders with the following query parameters:</p>
<table>
<thead>
<tr>
<th id="parameter">Parameter</th>
<th id="description">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>locale</code></td>
<td>Locale expressed as 2 letter code: locale={language_code} <br>Example: locale=en</td>
</tr>
<tr>
<td><code>match</code></td>
<td>Match id expressed as: sd:match:{match_id}. <br>Example: match_id=sd:match:4d1c4eb9-69d4-46fc-a42b-12be98227964</td>
</tr>
<tr>
<td><code>participant</code></td>
<td>Team or player id expressed as: sd:team:{team_id} or sd:player:{player_id} Examples: sd:team:82cf9565-6eb9-4f01-bdbd-5aa0d472fcd9 or sd:player:e3181493-6a2a-4e95-aa6f-3fc1ddeb7512</td>
</tr>
<tr>
<td><code>status</code></td>
<td>Status type expressed as: inprogress or created. <br>Example: status=inprogress</td>
</tr>
</tbody>
</table>
<p><a href="#top">Return to top</a></p>
<p><a id="FAQNFLv7"></a></p>
<h2 id="frequently-asked-questions">Frequently Asked Questions</h2>
<p><strong>Q: What format are date fields presented in?</strong></p>
<p>A: When we present date only values we present these in the ISO 8601 standard format.
<br>
ex: 2013-04-03
<br>
We use these for attributes that have date and no time (such as birthdate). For more information: <a href="https://en.wikipedia.org/wiki/ISO_8601">https://en.wikipedia.org/wiki/ISO_8601</a>
</p>
<p><strong>Q: What format are the date/time fields presented in?</strong></p>
<p>A: All of our Date/Time attributes are in UTC, presented in the ISO 8601 standard format.
<br>
ex: 2013-04-03T18:15:00+00:00
<br>
For more information: <a href="https://en.wikipedia.org/wiki/ISO_8601">https://en.wikipedia.org/wiki/ISO_8601</a></p>
<p><strong>Q: When are the game scores added to the Schedule feeds?</strong></p>
<p>A: Game and period scores will be added to the feed when the game status changes to complete.</p>
<p><strong>Q: What are the season types and their descriptions?</strong></p>
<p>A: Here are the valid season types and their descriptions:</p>
<ul>
<li>PRE – Pre-season</li>
<li>REG – Regular season</li>
<li>PST – Post-season</li>
</ul>
<p><strong>Q: What are the player positions I can expect to see?</strong></p>
<p>A: Below is a list of player positions that appear in our feeds and their descriptions. Note that additional decommissioned positions may appear in older seasons.</p>
<ul>
<li>C - Center</li>
<li>CB - Cornerback</li>
<li>DB - Defensive Back</li>
<li>DE - Defensive End</li>
<li>DL - Defensive Lineman</li>
<li>DT - Defensive Tackle</li>
<li>FB - Fullback</li>
<li>FS - Free Safety</li>
<li>G - Offensive Guard</li>
<li>K - Kicker</li>
<li>LB - Linebacker</li>
<li>LS - Long Snapper</li>
<li>MLB - Middle Linebacker</li>
<li>NT - Nose Tackle</li>
<li>OG - Offensive Guard</li>
<li>OL - Offensive Lineman</li>
<li>OLB - Outside Linebacker</li>
<li>OT - Offensive Tackle</li>
<li>P - Punter</li>
<li>QB - Quarterback</li>
<li>RB - Running Back</li>
<li>SAF - Safety</li>
<li>SS - Strong Safety</li>
<li>T - Offensive Tackle</li>
<li>TE - Tight End</li>
<li>WR - Wide Receiver</li>
</ul>
<p><strong>Q: How are player positions handled in the feeds?</strong></p>
<p>A: Players may receive a “game” position, that position may not match the position listed on the player’s profile outside the game.</p>
<p><strong>Q: What are the player statuses and their descriptions?</strong></p>
<p>A: Below is a list of the currently valid player statuses and their descriptions. Note that additional decommissioned statuses may appear in older seasons.</p>
<ul>
<li>ACT - Active</li>
<li>DUP - Duplicate player profile. All profiles marked as duplicates can be ignored.</li>
<li>EXE - Exempt</li>
<li>IR - Injured Reserve</li>
<li>IRD - Injured Reserve - Designated for Return</li>
<li>NON - Non-football related injured reserve</li>
<li>NWT - Not with team</li>
<li>PRA - Practice Squad</li>
<li>PUP - Physically unable to perform</li>
<li>RET - Retired</li>
<li>SUS - Suspended</li>
<li>UDF - Unsigned draft pick</li>
</ul>
<p><strong>Q: What are the player game statuses and when can I expect them to populate?</strong></p>
<p>A: Below is a list of currently valid player game statuses.</p>
<ul>
<li><code>deactivated</code></li>
<li><code>dnp</code> (Did Not Play)</li>
<li><code>played</code></li>
<li><code>started</code></li>
</ul>
<p>These player game statuses will appear within the Game Roster feed exclusively. When a game is set to <code>created</code> all players are marked as <code>played</code>. At the conclusion of the game players are adjusted to <code>deactivated</code>,<code>dnp</code>, and <code>played</code> as necessary.</p>
<p><strong>Q: What are the venue roof types I can expect to see?</strong></p>
<p>A: Here are the valid roof types: outdoor, dome, or retractable_dome</p>
<p><strong>Q: What are the venue surfaces I can expect to see?</strong></p>
<p>A: Here are the valid venue surfaces: turf or artifical</p>
<p><strong>Q: What are the game statuses and their descriptions?</strong></p>
<p>A: Here are the valid game statuses and their descriptions:</p>
<ul>
<li>scheduled – The game is scheduled to occur.</li>
<li>created – Game data (rosters, officials, etc) are being pre-loaded in preparation for the game.</li>
<li>inprogress – The game is in progress.</li>
<li>halftime – The game is currently at halftime.</li>
<li>complete – The game is over, but stat validation is not complete.</li>
<li>closed – The game is over and the stats have been validated.</li>
<li>cancelled – The game has been cancelled. No makeup game will be played as a result.</li>
<li>postponed – The game has been postponed, to be made up at another day and time. Once the makeup game is announced, a new game and ID will be created and scheduled on the announced makeup date. You should request the scheduled feed(s) regularly to identify the re-scheduled makeup game(s).</li>
<li>delayed – The scheduled game, or a game that was in progress, is now delayed for some reason.</li>
<li>suspended – The game has been suspended and will be rescheduled in the future, continuing where they left off. The game ID will remain the same.</li>
<li>flex-schedule – The game is currently scheduled to occur on a specific date and time, however, it will more than likely be moved to a different time for broadcast purposes.</li>
<li>time-tbd – The game has been scheduled, but a time has yet to be announced.</li>
</ul>
<p><strong>Q: What are the start and end reasons for a drive that I can expect to see in the feeds?</strong></p>
<p>A: Here are the end reasons for a drive:</p>
<ul>
<li>UNKNOWN – Start/End</li>
<li>Touchdown – Start/End</li>
<li>Safety – End</li>
<li>Field Goal – Start/End</li>
<li>Missed FG – Start/End</li>
<li>Blocked FG – Start/End</li>
<li>Blocked FG, Downs – Start/End</li>
<li>Blocked FG, Safety – End</li>
<li>Punt – Start/End</li>
<li>Blocked Punt – Start/End</li>
<li>Blocked Punt, Downs – Start/End</li>
<li>Blocked Punt, Safety – End</li>
<li>Downs – Start/End</li>
<li>Interception – Start/End</li>
<li>Fumble – Start/End</li>
<li>Fumble, Safety - End</li>
<li>Missed FG – End</li>
<li>Muffed FG – Start/End</li>
<li>Muffed Punt – Start</li>
<li>Muffed Kickoff – Start</li>
<li>Kickoff – Start</li>
<li>Own Kickoff – Start</li>
<li>Onside Kick – Start</li>
<li>Kickoff, No Play – Start</li>
<li>End of Half – End</li>
<li>End of Game – End</li>
</ul>
<p><strong>Q: What are the event types I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid event types:</p>
<ul>
<li>setup</li>
<li>timeout</li>
<li>tv_timeout</li>
<li>two_minute_warning</li>
<li>comment</li>
<li>period_end</li>
<li>game_over</li>
</ul>
<p><strong>Q: What are the play types I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid play types:</p>
<ul>
<li>pass</li>
<li>rush</li>
<li>faircatch_kick</li>
<li>extra_point</li>
<li>conversion</li>
<li>free_kick</li>
<li>kickoff</li>
<li>punt</li>
<li>field_goal</li>
<li>penalty</li>
</ul>
<p><strong>Q: What are the point after score types I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid score types:</p>
<ul>
<li>extra_point</li>
<li>conversion</li>
<li>penalty</li>
</ul>
<p><strong>Q: What are the possible official assignments I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid official assignments:</p>
<ul>
<li>referee</li>
<li>umpire</li>
<li>headlinesman</li>
<li>linejudge</li>
<li>fieldjudge</li>
<li>sidejudge</li>
<li>backjudge</li>
<li>downjudge</li>
<li>replayofficial</li>
</ul>
<p><strong>Q: How are assisted sacks calculated in the feeds?</strong></p>
<p>A: Assisted sacks are credited when two player sack the quarterback. We provide this in the play-by-play feed and game boxscore as an integer. Those sacks are rolled up into the sacks stat and can be a float, so if a player had 3 ast_sacks and 2 sacks in a game his game-level sack number would be 3.5.</p>
<p><strong>Q: What are the possible injury status values I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid injury status values:</p>
<ul>
<li>Questionable</li>
<li>Doubtful</li>
<li>Out</li>
</ul>
<p><strong>Q: What are the possible detail categories I can expect to see in the feeds?</strong></p>
<p>A: Here are the valid detail categories:</p>
<ul>
<li>aborted_snap</li>
<li>aborted_snap_recovery</li>
<li>blocked_kick</li>
<li>blocked_kick_recovery</li>
<li>defensive_conversion_fumble_recovery</li>
<li>defensive_conversion_interception_recovery</li>
<li>defensive_conversion_recovery</li>
<li>downed</li>
<li>extra_point_attempt</li>
<li>fair_catch</li>
<li>field_goal</li>
<li>field_goal_return</li>
<li>forced_fumble</li>
<li>fumble</li>
<li>fumble_out_of_bounds</li>
<li>kick_off</li>
<li>kick_off_return</li>
<li>lateral</li>
<li>muffed_kick</li>
<li>onside_kick_off</li>
<li>onside_kick_off_recovery</li>
<li>opponent_fumble_recovery</li>
<li>out_of_bounds</li>
<li>own_fumble_recovery</li>
<li>pass_completion</li>
<li>pass_incompletion</li>
<li>pass_interception</li>
<li>pass_interception_return</li>
<li>pass_reception</li>
<li>penalty</li>
<li>punt</li>
<li>punt_return</li>
<li>review</li>
<li>rush</li>
<li>sack</li>
<li>safety</li>
<li>tackle</li>
<li>touchback</li>
<li>touchdown</li>
<li>two_point_attempt</li>
<li>two_point_pass</li>
<li>two_point_return</li>
<li>two_point_rush</li>
</ul>
<p><strong>Q: What are subjective stats and how are they handled?</strong></p>
<p>A: Subjective stats are variety of data points that go beyond typical stats like yards, pass attempts, and touchdowns. Due to how the data is collected, it requires an operator to re-watch the game, thus there is a delay on when it is provided in the feeds.&nbsp;</p>
<p>These data points are delivered the following Tuesday by the end of the day (6:00 pm ET) and will show up in the existing NFL API feeds. The data is available in both XML and JSON feed formats.&nbsp;As the demand rises for additional data points we will continue to refine the data set collected.</p>
<p><strong>Q: Which statistics are subjective?</strong></p>
<p>A: Here are the valid subjective statistics:</p>
<ul>
<li>Batted Passes</li>
<li>Broken Tackles</li>
<li>Catchable Pass</li>
<li>Defender Blitz</li>
<li>Defensive Completion</li>
<li>Defensive Target</li>
<li>Dropped Pass</li>
<li>Fake Field Goal</li>
<li>Fake Punt</li>
<li>Hang Time</li>
<li>Hash Mark</li>
<li>Huddle</li>
<li>Hurry</li>
<li>Incompletion Type</li>
<li>Kneel down</li>
<li>Knockdown</li>
<li>Left Tightends</li>
<li>Men in Box</li>
<li>Missed Tackle</li>
<li>On Target Throws</li>
<li>Onside Attempt</li>
<li>Onside Success</li>
<li>Pass Route</li>
<li>Play Action</li>
<li>Play Direction</li>
<li>Players Rushed</li>
<li>Pocket Location</li>
<li>Pocket Time</li>
<li>QB at Snap</li>
<li>QB Blitz</li>
<li>QB Hurry</li>
<li>QB Knockdown</li>
<li>Right Tightends</li>
<li>Run Pass Option</li>
<li>Running Lane</li>
<li>Scramble</li>
<li>Screen Pass</li>
<li>TE Location</li>
<li>Team Blitz</li>
<li>Yards After Contact</li>
</ul>
<p><strong>Q: When can I expect NFL draftees to populate in the Prospects endpoint?</strong></p>
<p>A: Prospects are typically added in mid to late March, after the draft order is determined by the NFL.</p>
<p><strong>Q: How is the data within the Draft feeds populated?</strong></p>
<p>A: Sportradar’s experts seed players from our NCAA database. We use a variety of sources to generate a comprehensive list of players who expect to be drafted. The list is typically 500+ players.</p>
<p><strong>Q: How is an NFL prospect specified as a top prospect?</strong></p>
<p>A: Top prospects are subjective. We use the same sources for top prospects as we do when creating the initial draft pool.</p>
<p><strong>Q: What are the valid transaction_code and transaction_type values?</strong></p>
<p>A: Here is a list of the valid transaction codes and types:</p>
<ul>
<li>ACT - Activated</li>
<li>CL - Claimed</li>
<li>CEXP - Contract Expired</li>
<li>CEXT - Contract Extension</li>
<li>DEC - Deceased</li>
<li>FA - Declared Free Agency</li>
<li>TAG – Designated Franchise Tag</li>
<li>DRA - Drafted</li>
<li>SUS - League Suspension</li>
<li>ABS - Leave of Absence</li>
<li>NWT - Not with Team</li>
<li>TRAN - Other Transaction</li>
<li>EXE – Placed on Exempt/Commissioner’s List</li>
<li>IR – Placed on Injured Reserve</li>
<li>IRDR – Placed on Injured Reserve – Designated for Return</li>
<li>PUP – Placed on Physically Unable to Perform List</li>
<li>NON – Placed on Reserve/Non Football Injury List</li>
<li>RSGN - Re-Signed</li>
<li>RSUS - Reinstated from Suspension</li>
<li>REL - Released</li>
<li>RET - Retired</li>
<li>EDRA - Selected in Expansion Draft</li>
<li>SGN – Signed</li>
<li>PRA – Assigned to Practice Squad</li>
<li>TSUS - Team Suspension</li>
<li>TRD - Traded</li>
<li>WA – Waived</li>
<li>WAI – Waived – Injury</li>
</ul>
<p><strong>Q: What is the breadth of your transaction availability?</strong></p>
<p>A: Our NFL transaction data goes back to 2002. All data can be accessed via the Daily Transactions endpoint.</p>
<p><strong>Q: What are the possible clinched status values I can expect to see in the Postgame Standings feed?</strong></p>
<p>A: Here are the valid clinched status values, and their definitions:</p>
<ul>
<li><strong>conference</strong> – Clinched Home-Field Advantage</li>
<li><strong>division_first_round_bye</strong> – Clinched First-Round Bye</li>
<li><strong>division</strong> – Clinched Division Title</li>
<li><strong>playoff_berth</strong> – Clinched Playoff Berth</li>
<li><strong>wildcard</strong> – Clinched Wild Card</li>
<li><strong>eliminated</strong> – Eliminated</li>
</ul>
<p><strong>Q: What are the possible event types (payload.pulse.event_type) I can expect to see covered in the Push Pulse feed?</strong></p>
<p>A: Here are the valid event types we provide:</p>
<ul>
<li>timeout</li>
<li>time_adjusted</li>
<li>delete</li>
<li>timeout_over</li>
<li>game_suspended</li>
<li>game_suspended_over</li>
<li>coin_toss</li>
<li>play_start</li>
<li>play_over</li>
<li>challenge</li>
<li>tv_timeout</li>
<li>tv_timeout_over</li>
<li>review</li>
<li>review_over</li>
<li>players_lining_up</li>
<li>in_game_player_status</li>
<li>game_complete</li>
</ul>
<p><strong>Q: What are the possible in-game player status updates (player.in_game_status) I can expect to see in the Game Roster endpoint?</strong></p>
<p>A: Here are the valid in-game player statuses we provide:</p>
<ul>
<li>active</li>
<li>probable</li>
<li>questionable</li>
<li>doubtful</li>
<li>out</li>
<li>benched</li>
<li>unknown</li>
</ul>
<p><strong>Q: How do I locate the TTL (Time to Live)/cache on an API endpoint? </strong></p>
<p>A: The cache (in seconds) can be accessed in the returned header information on each RESTful API call, under <code>cache-control</code>.
<br>
ex. <code>cache-control: <b>max-age=1</b>, public, <b>s-maxage=1</b></code> or<br> <code>cache-control: public, must-revalidate, <b>max-age=120</b></code><br><br>
Note that, for select game-centric endpoints, the TTL may adjust when an event is live. This information is available for each endpoint on our developer portal.</p>
<p><a href="#top">Return to top</a><br>
        </p></div><div class="grid-nav offside offside--left"><div id="docs-nav-inner" class="padding-top"><ul id="nav-docs">
<li class="active"><a href="https://developer.sportradar.com/docs/read/Home">Documentation</a></li>
<li class="active"><a href="https://developer.sportradar.com/docs/read/american_football" class="js-ajax-ignore">Football (American Football)</a><ul>
<li class="active current-page"><a href="https://developer.sportradar.com/docs/read/american_football/NFL_v7" class="active js-ajax-ignore">NFL v7</a><ul><li><a href="#nfl-api-overview">NFL API Overview</a></li><li><a href="#nfl-v7-api-map">NFL v7 API Map</a></li><li><a href="#simulations">Simulations</a></li><li><a href="#current-season-schedule">Current Season Schedule</a></li><li><a href="#current-week-schedule">Current Week Schedule</a></li><li><a href="#daily-change-log">Daily Change Log</a></li><li><a href="#daily-transactions">Daily Transactions</a></li><li><a href="#draft-summary">Draft Summary</a></li><li><a href="#game-boxscore">Game Boxscore</a></li><li><a href="#game-roster">Game Roster</a></li><li><a href="#game-statistics">Game Statistics</a></li><li><a href="#league-hierarchy">League Hierarchy</a></li><li><a href="#play-by-play">Play-By-Play</a></li><li><a href="#player-profile">Player Profile</a></li><li><a href="#postgame-standings">Postgame Standings</a></li><li><a href="#prospects">Prospects</a></li><li><a href="#season-schedule">Season Schedule</a></li><li><a href="#seasonal-statistics">Seasonal Statistics</a></li><li><a href="#seasons">Seasons</a></li><li><a href="#team-draft-summary">Team Draft Summary</a></li><li><a href="#team-profile">Team Profile</a></li><li><a href="#team-roster">Team Roster</a></li><li><a href="#top-prospects">Top Prospects</a></li><li><a href="#trades">Trades</a></li><li><a href="#weekly-depth-charts">Weekly Depth Charts</a></li><li><a href="#weekly-injuries">Weekly Injuries</a></li><li><a href="#weekly-schedule">Weekly Schedule</a></li><li><a href="#push-feeds">Push Feeds</a></li><li><a href="#push-draft-picks">Push Draft Picks</a></li><li><a href="#push-draft-trades">Push Draft Trades</a></li><li><a href="#push-events">Push Events</a></li><li><a href="#push-pulse">Push Pulse</a></li><li><a href="#push-statistics">Push Statistics</a></li><li><a href="#frequently-asked-questions">Frequently Asked Questions</a></li></ul></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/NFL_v6">NFL v6</a></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/NFL_v5">NFL v5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/NCAA_Mens_Football_v7">NCAA Men's Football v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/USFL_v7">USFL v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/Global_American_Football_v2">Global American Football v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/american_football/Global_American_Football_v1">Global American Football v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/football_soccer" class="js-ajax-ignore">Football (Soccer)</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/football_soccer/Soccer_Advanced_Analytics_v1">Soccer Advanced Analytics v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/football_soccer/Soccer_Extended_v4">Soccer Extended v4</a></li>
<li><a href="https://developer.sportradar.com/docs/read/football_soccer/Soccer_v4">Soccer v4</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/australian_rules_football" class="js-ajax-ignore">Australian Rules Football</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/australian_rules_football/Australian_Rules_Football_v3">Australian Rules Football v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/australian_rules_football/Australian_Rules_Football_v2">Australian Rules Football v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/australian_rules_football/Australian_Rules_Football_v1">Australian Rules Football v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/baseball" class="js-ajax-ignore">Baseball</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v7_with_Statcast">MLB v7 with Statcast</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v7">MLB v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v66">MLB v6.6</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v65">MLB v6.5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v6">MLB v6</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_v5">MLB v5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/Global_Baseball_v2">Global Baseball v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/Global_Baseball_v1">Global Baseball v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseball/MLB_Historical_v1">MLB Historical v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/basketball" class="js-ajax-ignore">Basketball</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_v8">NBA v8</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_v7">NBA v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_v5">NBA v5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_v4">NBA v4</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/WNBA_v8">WNBA v8</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/WNBA_v7">WNBA v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/WNBA_v4">WNBA v4</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/WNBA_v3">WNBA v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_G_League_v8">NBA G League v8</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_G_League_v7">NBA G League v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_G_League">NBA G League v5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Mens_Basketball_v8">NCAA Men's Basketball v8</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Mens_Basketball_v7">NCAA Men's Basketball v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Mens_Basketball_v4">NCAA Men's Basketball v4</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Mens_Basketball_v3">NCAA Men's Basketball v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Womens_Basketball_v8">NCAA Women's Basketball v8</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Womens_Basketball_v7">NCAA Women's Basketball v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NCAA_Womens_Basketball_v3">NCAA Women's Basketball v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/Global_Basketball_v2">Global Basketball v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/Global_Basketball_v1">Global Basketball v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/basketball/NBA_Historical_v1">NBA Historical v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/combat_sports" class="js-ajax-ignore">Combat Sports</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/combat_sports/MMA_v2">MMA v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/cricket" class="js-ajax-ignore">Cricket</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/cricket/Cricket_v2">Cricket v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/cricket/Cricket_Legacy_v2">Cricket Legacy v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/editorial_content" class="js-ajax-ignore">Editorial Content</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/editorial_content/Editorial_Content_v3">Editorial Content v3</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/golf" class="js-ajax-ignore">Golf</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/golf/Golf_v3">Golf v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/golf/Golf_v2">Golf v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/handball" class="js-ajax-ignore">Handball</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/handball/Handball_v2">Handball v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/handball/Handball_v1">Handball v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/hockey" class="js-ajax-ignore">Hockey</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/hockey/NHL_v7">NHL v7</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/NHL_v6">NHL v6</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/NHL_v5">NHL v5</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/NCAA_Mens_Hockey_v3">NCAA Mens Hockey v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/Global_Ice_Hockey_v2">Global Ice Hockey v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/Global_Ice_Hockey_v1">Global Ice Hockey v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/hockey/NHL_Historical_v1">NHL Historical v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/images" class="js-ajax-ignore">Images</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/images/Images_v3">Images v3</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/Insights" class="js-ajax-ignore">Insights</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/insights/Insights_User_Interface">Insights User Interface</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NBA_Insights_v2">NBA Insights v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NFL_Insights_v2">NFL Insights v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NHL_Insights_v2">NHL Insights v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/MLB_Insights_v2">MLB Insights v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NBA_Betting_Splits_v2">NBA Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NHL_Betting_Splits_v2">NHL Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/MLB_Betting_Splits_v2">MLB Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NFL_Betting_Splits_v2">NFL Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NCAAFB_Betting_Splits_v2">NCAAFB Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NCAAMB_Betting_Splits_v2">NCAAMB Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NCAAWB_Betting_Splits_v2">NCAAWB Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/Soccer_Betting_Splits_v2">Soccer Betting Splits v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NBA_Insights_v1">NBA Insights v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NHL_Insights_v1">NHL Insights v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/MLB_Insights_v1">MLB Insights v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/insights/NFL_Insights_v1">NFL Insights v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/odds" class="js-ajax-ignore">Odds</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/odds/Odds_Comparison_v1">Odds Comparison Regular</a></li>
<li><a href="https://developer.sportradar.com/docs/read/odds/Odds_Comparison_Futures">Odds Comparison Futures</a></li>
<li><a href="https://developer.sportradar.com/docs/read/odds/Odds_Comparison_Player_Props">Odds Comparison Player Props</a></li>
<li><a href="https://developer.sportradar.com/docs/read/odds/Odds_Comparison_Prematch">Odds Comparison Prematch</a></li>
<li><a href="https://developer.sportradar.com/docs/read/odds/Probabilities_v1">Probabilities v1</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/OnAir">Broadcast Graphics</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing" class="js-ajax-ignore">Racing</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/racing/NASCAR_v3">NASCAR v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/Classic_NASCAR_v3">Classic NASCAR v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/Formula_1_v2">Formula 1 v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/MotoGP_v2">MotoGP v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/IndyCar_v2">IndyCar v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/Formula_E_v2">Formula E v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/Rally_v2">Rally v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/racing/Indy_Lights_v2">Indy Lights v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/rugby" class="js-ajax-ignore">Rugby</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/rugby/Rugby_v3">Rugby v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/rugby/Rugby_v2">Rugby v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/tennis" class="js-ajax-ignore">Tennis</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/tennis/Tennis_v3">Tennis v3</a></li>
<li><a href="https://developer.sportradar.com/docs/read/tennis/Tennis_v2">Tennis v2</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/widgets" class="js-ajax-ignore">Widgets</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/widgets/General_Information">General Information</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/MLB_Widgets">MLB Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/NBA_Widgets">NBA Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/NCAA_Football">NCAA Football Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/NCAA_Mens_Basketball">NCAA Men's Basketball Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/NFL_Widgets">NFL Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/NHL_Widgets">NHL Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/Golf">Golf Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/WNBA_Widgets">WNBA Widgets</a></li>
<li><a href="https://developer.sportradar.com/docs/read/widgets/Soccer">Soccer Widgets</a></li>
</ul>
</li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage" class="js-ajax-ignore">Baseline Sports Coverage</a><ul>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Badminton_v2">Badminton v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Badminton_v1">Badminton v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Bandy_v2">Bandy v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Bandy_v1">Bandy v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Beach_Soccer_v2">Beach Soccer v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Beach_Soccer_v1">Beach Soccer v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Curling_v2">Curling v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Curling_v1">Curling v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Cycling_v2">Cycling v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Darts_v2">Darts v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Darts_v1">Darts v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Field_Hockey_v2">Field Hockey v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Field_Hockey_v1">Field Hockey v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Floorball_v2">Floorball v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Floorball_v1">Floorball v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Futsal_v2">Futsal v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Futsal_v1">Futsal v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Pesapallo_v2">Pesapallo v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Pesapallo_v1">Pesapallo v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Snooker_v2">Snooker v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Snooker_v1">Snooker v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Squash_v2">Squash v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Squash_v1">Squash v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Table_Tennis_v2">Table Tennis v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Volleyball_Beach_v2">Volleyball (Beach) v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Volleyball_Beach_v1">Volleyball (Beach) v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Volleyball_Indoor_v2">Volleyball (Indoor) v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Volleyball_Indoor_v1">Volleyball (Indoor) v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Waterpolo_v2">Waterpolo v2</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Waterpolo_v1">Waterpolo v1</a></li>
<li><a href="https://developer.sportradar.com/docs/read/baseline_sports_coverage/Winter_Sports_v1">Winter Sports v1</a></li>
</ul>
</li>
</ul></div></div></div></div></main><footer class="footer" id="footer"><div id="footer-1-wrapper">
    <div class="container">
        <a class="logo-contact" href="https://developer.sportradar.com/contact"><img src="https://developer.sportradar.com/files/contact.png"></a>
        <div class="text-small">
            <div class="row">
                <div class="grid-third">
                    <h2 class="h4 no-padding-top no-margin-bottom">Sportradar</h2>
                    <p>
                        150 South 5th St. Suite 400<br>
                        Minneapolis, MN 55402<br>
                        USA
                    </p>
                </div>
                <div class="grid-third">
                    <p>
                        <a href="mailto:us-sales@sportradar.com">us-sales@sportradar.com</a><br>
                        <a href="mailto:us-jobs@sportradar.com">us-jobs@sportradar.com</a><br>
                        Main: 612-361-4100<br>
                        Sales: 612-361-4102<br>
                        <a href="https://developer.sportradar.com/Terms_and_Conditions">Terms and Conditions</a><br>
                    </p>
                </div>
                <div class="grid-third">
                    <h2 class="h4 no-padding-top">Sportradar is Social</h2>
                    <ul class="list-inline">
                        <li>
                            <a class="link-icon" href="https://www.facebook.com/sportradarofficial/">
                                <svg xmlns="http://www.w3.org/2000/svg" style="height:1em;width:1em;" viewBox="0 0 48 48" aria-labelledby="title-facebook"><title id="title-facebook">Facebook</title><path fill="#ffffff" d="M31.5 7.5c-4.142 0-7.5 3.358-7.5 7.5v4.5h-6v6h6v21h6v-21h6.75l1.5-6H30V15c0-.828.672-1.5 1.5-1.5H39v-6h-7.5z"></path></svg>
                            </a>
                        </li>
                        <li>
                            <a class="link-icon" href="https://twitter.com/Sportradar">
                                <svg xmlns="http://www.w3.org/2000/svg" style="height:1em;width:1em;" viewBox="0 0 48 48" aria-labelledby="title-twitter"><title id="title-twitter">Twitter</title><path fill="#ffffff" d="M48 9.113c-1.766.783-3.664 1.313-5.656 1.55 2.033-1.218 3.595-3.148 4.33-5.447-1.903 1.13-4.01 1.948-6.254 2.39-1.796-1.914-4.356-3.11-7.188-3.11-5.44 0-9.848 4.41-9.848 9.847 0 .772.087 1.523.255 2.244-8.185-.41-15.442-4.33-20.3-10.29C2.494 7.753 2.01 9.445 2.01 11.25c0 3.416 1.738 6.43 4.38 8.196-1.613-.05-3.132-.494-4.46-1.232v.124c0 4.77 3.395 8.75 7.9 9.656-.827.225-1.697.346-2.595.346-.635 0-1.25-.062-1.853-.177 1.253 3.912 4.89 6.76 9.2 6.84-3.37 2.64-7.618 4.215-12.23 4.215-.796 0-1.58-.047-2.35-.138 4.358 2.794 9.534 4.425 15.096 4.425 18.114 0 28.02-15.006 28.02-28.02 0-.426-.01-.85-.03-1.273C45.01 12.824 46.68 11.09 48 9.114z"></path></svg>
                            </a>
                        </li>
                        <li>
                            <a class="link-icon" href="https://www.linkedin.com/company/sportradar">
                                <svg xmlns="http://www.w3.org/2000/svg" style="height:1em;width:1em;" viewBox="0 0 48 48" aria-labelledby="title-linkedin">LinkedIn<title id="title-"></title><path fill="#ffffff" d="M18 18h8.302v4.255h.12C27.575 20.183 30.4 18 34.616 18 43.38 18 45 23.455 45 30.55V45h-8.653V32.19c0-3.056-.063-6.986-4.5-6.986-4.508 0-5.196 3.327-5.196 6.764V45H18V18zM3 18h9v27H3V18zM12 10.5c0 2.485-2.015 4.5-4.5 4.5S3 12.985 3 10.5 5.015 6 7.5 6 12 8.015 12 10.5z"></path>
                            </svg></a>
                        </li>
                    </ul>
                </div>
            </div>
            <p><a href="https://sportradar.com/privacy-notice/">Privacy Policy</a> © Sportradar, a subsidiary of Sportradar AG</p>
        </div>
    </div>
</div><nav id="nav-secondary-wrapper"><div class="nav-secondary container" id="nav-secondary"><ul id="nav-secondary-list"></ul></div></nav><div id="footer-2-wrapper">
	<div class="container text-center-large">
		<p class="margin-bottom-small"><img height="37" width="101" src="https://developer.sportradar.com/files/FB_techpartners.png"></p>
		<p></p>
	</div>
</div></footer><div id="mashery-made"><div class="container"><p></p></div></div></div></div>
<script type="text/javascript">
//<![CDATA[
/*!
 * Templates & Initializations
 * sportradar v2.0.0
 * Portal Theme Starter Kit v2.6.1 - Default Theme
 * http://github.com/mashery/portal-theme-starter-kit
 */

/**
 * Theme Templates
 */

// Base layout
// The markup structure that all of the content will get loaded into.
// {{layout.navUser}} - The wrapper for the user navigation.
// {{layout.navPrimary}} - The wrapper for the primary navigation.
// {{layout.main}} - The wrapper for the main content area.
// {{layout.footer1}} - The wrapper for the first footer content area.
// {{layout.navSecondary}} - The wrapper for the secondary navigation.
// {{layout.footer2}} - The wrapper for the second footer content area.
portalOptions.templates.layout =
	'<a class="screen-reader screen-reader-focusable" href="#main-wrapper">Skip to content</a>' +
	'{{layout.navPrimary}}' +
	'{{layout.navUser}}' +
	'{{layout.main}}' +
	'<footer class="footer" id="footer">' +
		'{{layout.footer1}}' +
		'{{layout.navSecondary}}' +
		'{{layout.footer2}}' +
	'</footer>';

// Primary Navigation
// The primary navigation content for the Portal.
// {{content.menuToggle}} - The label on the button to expand and collapse the navigation menu on smaller screens.
portalOptions.templates.primaryNav = function () {
	var template =
		'<div class="nav-primary nav-wrap" id="nav-primary">' +
			'<div class="container padding-top-small padding-bottom-small">' +
				'<a id="logo" class="logo" href="/">{{content.logo}}</a>' +
				(mashery.contentType === 'docs' ? '<div class="nav-toggle-wrap">' : '' ) +
					'<a role="button" class="nav-toggle" id="nav-primary-toggle" data-nav-toggle=".nav-collapse" href="#">&#9776; Menu</a>' +
					(mashery.contentType === 'docs' ? '<a role="button" class="nav-toggle margin-right js-scroll-ignore" id="nav-docs-toggle" href="#">&#8942; Docs Navigation</a>' : '') +
				(mashery.contentType === 'docs' ? '</div>' : '' ) +
				'<div class="nav-menu nav-collapse" id="nav-primary-menu">' +
					'<ul class="nav" id="nav-primary-list">' +
						'{{content.navItemsPrimary}}' +
					'</ul>' +
				'</div>' +
			'</div>' +
		'</div>';
	return template;
};

// User Navigation
// The navigation menu for sign in, registration, account, and logout links.
portalOptions.templates.userNav =
	'<div class="nav-user container" id="nav-user">' +
		'<div class="nav-menu nav-collapse" id="nav-user-menu">' +
			'<ul class="nav-user-list list-inline text-muted text-right-large padding-top-small padding-bottom-small no-margin-bottom" id="nav-user-list">' +
				'{{content.navItemsUser}}' +
			'</ul>' +
		'</div>' +
	'</div>';

// Documentation
// The layout for API documentation. This page includes an automatically generated navigation menu.
// {{content.subheading}} - The heading above the documentation sub-navigation.
portalOptions.templates.docs =
	'<div class="main" id="main">' +
		'<div class="row row-docs">' +
			'<div class="grid-docs grid-flip content">' +
				'<h1>{{content.heading}}</h1>' +
				'{{content.main}}' +
			'</div>' +
			'<div class="grid-nav">' +
				'<div id="docs-nav-inner" class="padding-top">' +
					'<ul id="nav-docs">{{content.secondary}}</ul>' +
				'</div>' +
			'</div>' +
		'</div>' +
	'</div>';

// Footer 1
// The first of two footer content sections.
portalOptions.templates.footer1 = function () {
	var template = mashery.dom.querySelector('#footer [data-footer-template-1]');
	if (!template) return '';
	return template.innerHTML;
};

// Footer 2
// The first of two footer content sections.
portalOptions.templates.footer2 = function () {
	var template = mashery.dom.querySelector('#footer [data-footer-template-2]');
	if (!template) return '';
	return template.innerHTML;
};

// Enable full width layouts
window.portalOptions.templates.page = function () {
	return	'<div class="main container container-small content" id="main">' +
				(mashery.globals.noHeader ? '' : '<h1>{{content.heading}}</h1>') +
				'{{content.main}}' +
			'</div>';
};

// Add theme style hook
document.documentElement.className += ' js-theme-default';


/**
 * Load custom typeface
 */
window.addEventListener('portalAfterInit', function () {
	m$.loadJS('https://cdn.jsdelivr.net/gh/bramstein/fontfaceobserver@2.0.13/fontfaceobserver.standalone.js', function () {
		m$.loadCSS('https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400i,600,600i,700,700i');
		var font = new FontFaceObserver('Source Sans Pro');
		font.load().then(function () {
			document.documentElement.classList.add('fonts-loaded');
		});
	});
}, false);


/**
 * Favicon
 * Add a favicon/tab icon for your Portal.
 */

// If true, inject a favicon
window.portalOptions.favicon = true;

// The favicon sizes
window.portalOptions.faviconSizes = '16x16 24x24 32x32 64x64';



/**
 * Logo
 * Add a custom logo. Accepts any markup as a string (`<img src>`, `<svg></svg>`, etc.).
 */
portalOptions.logo = '<img height="35" width="202" alt="Sportradar Developer Portal" src="https://developer.sportradar.com/files/logo.svg">';


// Sign In
// The sign in page.
portalOptions.labels.signin = {
    main: '<p class="h3">Sign in to {{mashery.area}} using your Mashery ID.</p>', // The message above the sign in form
};


/**
 * Validate a form with JS
 * @param  {String} form       A selector for the form
 * @param  {Array}  checkGroup Checkbox groups to validate
 */
var formValidation = function (form, checkGroup) {

	'use strict';

	//
	// Variables
	//

	var form = document.querySelector(form);
	if (!form) return;
	var fields = Array.prototype.slice.call(form.querySelectorAll('input.require:not(#members-sr_contact), textarea.require, select.require'));
	var fieldError = 'This value is not allowed to be blank.';


	//
	// Methods
	//

	var shiftFocus = function () {
		var field = form.querySelector('ul.error');
		if (!field) return;
		if (!field.hasAttribute('tabindex')) {
			field.setAttribute('tabindex', '-1');
		}
		field.focus();
	};

	var removeErrors = function () {
		var errors = Array.prototype.slice.call(form.querySelectorAll('ul.error'));
		errors.forEach(function (error) {
			var field = error.parentNode.querySelector('.failure');
			error.parentNode.removeChild(error);
			if (field) {
				field.classList.remove('failure');
			}
		});
	};

	var showFormError = function () {

		// If error already exists, use it
		var existing = form.querySelector('ul.failure');
		if (existing) return;

		// Otherwise, create one
		var error = document.createElement('ul');
		error.className = 'failure';
		error.innerHTML = '<li>Please correct the noted errors.</li>';
		form.insertBefore(error, form.firstChild);

	};

	var showFieldError = function (field) {

		// Get target location
		var target = field;
		if (field.type === 'radio') {

			// Get radio button last input
			var allFields = form.querySelectorAll('[name="' + field.name + '"]');
			target = allFields[allFields.length - 1].parentNode;

			// If an error is already there, bail
			if (target.parentNode.querySelector('ul.error li')) return
				;
		}

		// Insert error
		var error = document.createElement('ul');
		error.className = 'error';
		error.innerHTML = '<li>' + fieldError + '</li>';
		target.parentNode.insertBefore(error, target.nextSibling);
		target.classList.add('failure');

	};

	var isValid = function (field) {
		if (field.hasAttribute('hidden') || field.type === 'submit' || field.type === 'hidden') return true;
		if (field.type !== 'radio' && field.value.length > 0) return true;
		if (field.type === 'radio') {
			var allFields = Array.prototype.slice.call(form.querySelectorAll('[name="' + field.name + '"]'));
			var valid = false;
			allFields.forEach(function (radio) {
				if (radio.checked) {
					valid = true;
				}
			});
			return valid;
		}
		return false;
	};

	/**
	 * Validate form
	 */
	var submitHandler = function (event) {

		// // Stop form from submitting
		// event.preventDefault();

		// Default form validity
		var valid = true;

		// Remove existing errors
		removeErrors();

		// Validate all fields
		fields.forEach(function (field) {
			if (isValid(field)) return;
			showFieldError(field);
			valid = false;
		});

		// Checkboxes
		if (checkGroup && checkGroup.length > 0) {
			checkGroup.forEach(function (checkboxes) {

				var selectedCheckboxes = checkboxes.checkboxes.filter(function (selector) {
					var checkbox = document.querySelector(selector);
					return (!!checkbox && checkbox.checked);
				});

				var isHidden = checkboxes.checkboxes.filter(function (selector) {
					var checkbox = document.querySelector(selector);
					return (!!checkbox && checkbox.closest('[hidden]'));
				});

				if (isHidden.length > 0) return;

				if (selectedCheckboxes.length < 1) {
					showFieldError(document.querySelector(checkboxes.legend));
					valid = false;
				}

			});
		}

		if (valid) return;

		// Stop form from submitting
		event.preventDefault();
		showFormError();
		shiftFocus();

	};


	//
	// Event Listeners
	//

	form.addEventListener('submit', submitHandler, false);

};


/**
 * Initialize plugins
 */
window.addEventListener('portalAfterRender', function () {

	// Expand-and-collapse nav on small viewports
	astro.init();

	// Enhanced documentation
	var docs = {};
	if (document.querySelector('.better-docs-nav')) {
		docs = new BetterDocs('.content', {
			langs: {
				bash: {
					selector: 'bash',
					title: 'Bash'
				},
				ruby: {
					selector: 'ruby',
					title: 'Ruby'
				},
				python: {
					selector: 'python',
					title: 'Python'
				}
			},
			langDefault: 'bash',
			tocSelector: 'h2',
			wideLayout: true,
		});
		var betterDocsNav = document.querySelector('.better-docs-nav');
		var betterDocsHeader = document.querySelector('h1');
		if (betterDocsNav && betterDocsHeader) {
			betterDocsHeader.before(betterDocsNav);
		}
	}
	// Destroy instantiation on Ajax page reload
	window.addEventListener('portalBeforeRender', function () {
		if ('destroy' in docs) {
			docs.destroy();
		}
	}, false);

	// Conditional content
	// Add logged-in/logged-out class
	if (window.mashery.loggedIn) {
		document.documentElement.classList.add('is-logged-in');
		document.documentElement.classList.remove('is-logged-out');
	} else {
		document.documentElement.classList.add('is-logged-out');
		document.documentElement.classList.remove('is-logged-in');
	}

	// Responsive iFrame Videos
	fluidvids.init({
		selector: ['iframe', 'object'], // runs querySelectorAll()
		players: ['www.youtube.com', 'player.vimeo.com'] // players to support
	});

	// Get the latest blog posts
	latestBlogPosts();

	// Smooth scrolling to anchor links
	var scroll = {};
	scroll = new SmoothScroll('.category-page #main-wrapper a[href*="#"], .category-docs #main-wrapper a[href*="#"], .category-docs #main-wrapper a[href*="#"], .category-blogall #main-wrapper a[href*="#"], .category-blogsingle #main-wrapper a[href*="#"], #nav-docs a[href*="#"]', {
		ignore: '.js-scroll-ignore, .tabs a'
	});

	// Destroy instantiation on Ajax page reload
	window.addEventListener('portalBeforeRender', function () {
		if ('destroy' in scroll) {
			scroll.destroy();
		}
	}, false);

	// Language translation
	// window.addEventListener('portalAfterRender', function () {
	// 	// NOTE: You should update this with your desired options, languages, and translations.
	// 	// Details at https://developer.mashery.com/docs/customizing_your_portal/plugins/Translate
	// 	var translate = new Translate();
	// }, false);

	// Sticky footer
	if (mashery.contentType === 'docs') {
		stickyFooter.destroy();
	} else {
		stickyFooter.init('#footer');
		window.setTimeout(function () {
			stickyFooter.setPush();
		}, 250);
	}

	// Toggle Tabs
	tabs();

	// Docs nav
	if (mashery.contentType === 'docs') {
		stickyDocs.init(function () {
			scrollspy.cacheOffsets();
		});
		scrollspy.init();
	} else {
		stickyDocs.destroy();
		scrollspy.destroy();
	}

	// Docs TOC on empty pages
	docsBodyTOC();

	//Offside.js
	var myOffside;
	if ('destroy' in offside) {
		offside.destroy();
	}
	if (mashery.contentType === 'docs') {
		myOffside = offside('.grid-nav', {
			slidingElementsSelector:'.grid-docs',
			buttonsSelector: '#nav-docs-toggle',
		});
	}

	// Docs navigation expand-and-collapse
	if ('destroy' in docsNavCollapse) {
		docsNavCollapse.destroy();
	}
	docsNavCollapse.init();

	// Slide Messages
	if (mashery.globals.messages) {
		slideMessages(mashery.globals.messages, mashery.globals.messagelinks || []);
	}

	// Registration form validation
	formValidation('[action*="/member/register"]');

}, false);

// User Registration
// The user registration page.
portalOptions.labels.register = {
  sidebar: '',
	// The message above the form
	main: 	'<p>There are two steps to getting started with Sportradar APIs:</p>' +
			'<ul>' +
				'<li>Register your account, creating a username that you’ll use to access your keys.</li>' +
				'<li>Register an application to get a free trial API key for each sport or league you are interested in.</li>' +
			'</ul>' +
			'<p>This key identifies your account and application, and is required for any API calls.</p>' +
			'<p>Once you have your keys, you can view our documentation to find the syntax used to call the Sportradar APIs. You don’t need to write any code to get started. Instead, you can use our API Sandbox to test those calls against our sports data.</p>' +
      '<p>* Denotes a required field.</p>',
};

// Toggle IO Docs APIs and endpoints with query strings
window.addEventListener('portalIODocsReady', function () {
    toggleIODocs();
}, false);
//]]>
</script>
    <script src="https://developer.sportradar.com/files/main.min.js" type="text/javascript"></script>
<script type="text/javascript">
        m$.init(portalOptions);
</script>    

</body></html>